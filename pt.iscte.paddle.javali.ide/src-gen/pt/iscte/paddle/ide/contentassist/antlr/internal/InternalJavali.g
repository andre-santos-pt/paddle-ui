/*
 * generated by Xtext 2.19.0
 */
grammar InternalJavali;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package pt.iscte.paddle.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package pt.iscte.paddle.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import pt.iscte.paddle.services.JavaliGrammarAccess;

}
@parser::members {
	private JavaliGrammarAccess grammarAccess;

	public void setGrammarAccess(JavaliGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getAlternatives()); }
		(rule__Module__Alternatives)*
		{ after(grammarAccess.getModuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getGroup()); }
		(rule__Constant__Group__0)
		{ after(grammarAccess.getConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecord
entryRuleRecord
:
{ before(grammarAccess.getRecordRule()); }
	 ruleRecord
{ after(grammarAccess.getRecordRule()); } 
	 EOF 
;

// Rule Record
ruleRecord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecordAccess().getGroup()); }
		(rule__Record__Group__0)
		{ after(grammarAccess.getRecordAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedure
entryRuleProcedure
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAccess().getGroup()); }
		(rule__Procedure__Group__0)
		{ after(grammarAccess.getProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturn
entryRuleReturn
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnAccess().getGroup()); }
		(rule__Return__Group__0)
		{ after(grammarAccess.getReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBreak
entryRuleBreak
:
{ before(grammarAccess.getBreakRule()); }
	 ruleBreak
{ after(grammarAccess.getBreakRule()); } 
	 EOF 
;

// Rule Break
ruleBreak 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBreakAccess().getGroup()); }
		(rule__Break__Group__0)
		{ after(grammarAccess.getBreakAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContinue
entryRuleContinue
:
{ before(grammarAccess.getContinueRule()); }
	 ruleContinue
{ after(grammarAccess.getContinueRule()); } 
	 EOF 
;

// Rule Continue
ruleContinue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContinueAccess().getGroup()); }
		(rule__Continue__Group__0)
		{ after(grammarAccess.getContinueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclarationAssign
entryRuleVarDeclarationAssign
:
{ before(grammarAccess.getVarDeclarationAssignRule()); }
	 ruleVarDeclarationAssign
{ after(grammarAccess.getVarDeclarationAssignRule()); } 
	 EOF 
;

// Rule VarDeclarationAssign
ruleVarDeclarationAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAssignAccess().getGroup()); }
		(rule__VarDeclarationAssign__Group__0)
		{ after(grammarAccess.getVarDeclarationAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarAssign
entryRuleVarAssign
:
{ before(grammarAccess.getVarAssignRule()); }
	 ruleVarAssign
{ after(grammarAccess.getVarAssignRule()); } 
	 EOF 
;

// Rule VarAssign
ruleVarAssign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAssignAccess().getGroup()); }
		(rule__VarAssign__Group__0)
		{ after(grammarAccess.getVarAssignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElse
entryRuleIfElse
:
{ before(grammarAccess.getIfElseRule()); }
	 ruleIfElse
{ after(grammarAccess.getIfElseRule()); } 
	 EOF 
;

// Rule IfElse
ruleIfElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseAccess().getGroup()); }
		(rule__IfElse__Group__0)
		{ after(grammarAccess.getIfElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoWhile
entryRuleDoWhile
:
{ before(grammarAccess.getDoWhileRule()); }
	 ruleDoWhile
{ after(grammarAccess.getDoWhileRule()); } 
	 EOF 
;

// Rule DoWhile
ruleDoWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoWhileAccess().getGroup()); }
		(rule__DoWhile__Group__0)
		{ after(grammarAccess.getDoWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatementInit
entryRuleForStatementInit
:
{ before(grammarAccess.getForStatementInitRule()); }
	 ruleForStatementInit
{ after(grammarAccess.getForStatementInitRule()); } 
	 EOF 
;

// Rule ForStatementInit
ruleForStatementInit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementInitAccess().getAlternatives()); }
		(rule__ForStatementInit__Alternatives)
		{ after(grammarAccess.getForStatementInitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getAlternatives()); }
		(rule__ForStatement__Alternatives)
		{ after(grammarAccess.getForStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIncrement
entryRuleIncrement
:
{ before(grammarAccess.getIncrementRule()); }
	 ruleIncrement
{ after(grammarAccess.getIncrementRule()); } 
	 EOF 
;

// Rule Increment
ruleIncrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncrementAccess().getGroup()); }
		(rule__Increment__Group__0)
		{ after(grammarAccess.getIncrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecrement
entryRuleDecrement
:
{ before(grammarAccess.getDecrementRule()); }
	 ruleDecrement
{ after(grammarAccess.getDecrementRule()); } 
	 EOF 
;

// Rule Decrement
ruleDecrement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecrementAccess().getGroup()); }
		(rule__Decrement__Group__0)
		{ after(grammarAccess.getDecrementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXor
entryRuleXor
:
{ before(grammarAccess.getXorRule()); }
	 ruleXor
{ after(grammarAccess.getXorRule()); } 
	 EOF 
;

// Rule Xor
ruleXor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorAccess().getGroup()); }
		(rule__Xor__Group__0)
		{ after(grammarAccess.getXorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getGroup()); }
		(rule__Relation__Group__0)
		{ after(grammarAccess.getRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getValueAssignment()); }
		(rule__Literal__ValueAssignment)
		{ after(grammarAccess.getLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNull
entryRuleNull
:
{ before(grammarAccess.getNullRule()); }
	 ruleNull
{ after(grammarAccess.getNullRule()); } 
	 EOF 
;

// Rule Null
ruleNull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullAccess().getGroup()); }
		(rule__Null__Group__0)
		{ after(grammarAccess.getNullAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarExpression
entryRuleVarExpression
:
{ before(grammarAccess.getVarExpressionRule()); }
	 ruleVarExpression
{ after(grammarAccess.getVarExpressionRule()); } 
	 EOF 
;

// Rule VarExpression
ruleVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarExpressionAccess().getGroup()); }
		(rule__VarExpression__Group__0)
		{ after(grammarAccess.getVarExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcCall
entryRuleProcCall
:
{ before(grammarAccess.getProcCallRule()); }
	 ruleProcCall
{ after(grammarAccess.getProcCallRule()); } 
	 EOF 
;

// Rule ProcCall
ruleProcCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcCallAccess().getGroup()); }
		(rule__ProcCall__Group__0)
		{ after(grammarAccess.getProcCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getGroup()); }
		(rule__Type__Group__0)
		{ after(grammarAccess.getTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewArray
entryRuleNewArray
:
{ before(grammarAccess.getNewArrayRule()); }
	 ruleNewArray
{ after(grammarAccess.getNewArrayRule()); } 
	 EOF 
;

// Rule NewArray
ruleNewArray 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewArrayAccess().getGroup()); }
		(rule__NewArray__Group__0)
		{ after(grammarAccess.getNewArrayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewObject
entryRuleNewObject
:
{ before(grammarAccess.getNewObjectRule()); }
	 ruleNewObject
{ after(grammarAccess.getNewObjectRule()); } 
	 EOF 
;

// Rule NewObject
ruleNewObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewObjectAccess().getGroup()); }
		(rule__NewObject__Group__0)
		{ after(grammarAccess.getNewObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getIdAssignment()); }
		(rule__Identifier__IdAssignment)
		{ after(grammarAccess.getIdentifierAccess().getIdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getConstantsAssignment_0()); }
		(rule__Module__ConstantsAssignment_0)
		{ after(grammarAccess.getModuleAccess().getConstantsAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getRecordsAssignment_1()); }
		(rule__Module__RecordsAssignment_1)
		{ after(grammarAccess.getModuleAccess().getRecordsAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getModuleAccess().getProceduresAssignment_2()); }
		(rule__Module__ProceduresAssignment_2)
		{ after(grammarAccess.getModuleAccess().getProceduresAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getRetTypeAssignment_2_0()); }
		(rule__Procedure__RetTypeAssignment_2_0)
		{ after(grammarAccess.getProcedureAccess().getRetTypeAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcedureAccess().getVoidAssignment_2_1()); }
		(rule__Procedure__VoidAssignment_2_1)
		{ after(grammarAccess.getProcedureAccess().getVoidAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getGroup_0()); }
		(rule__Statement__Group_0__0)
		{ after(grammarAccess.getStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_1()); }
		(rule__Statement__Group_1__0)
		{ after(grammarAccess.getStatementAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_2()); }
		(rule__Statement__Group_2__0)
		{ after(grammarAccess.getStatementAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_3()); }
		(rule__Statement__Group_3__0)
		{ after(grammarAccess.getStatementAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_4()); }
		(rule__Statement__Group_4__0)
		{ after(grammarAccess.getStatementAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_5()); }
		(rule__Statement__Group_5__0)
		{ after(grammarAccess.getStatementAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_6()); }
		(rule__Statement__Group_6__0)
		{ after(grammarAccess.getStatementAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_7()); }
		(rule__Statement__Group_7__0)
		{ after(grammarAccess.getStatementAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfElseParserRuleCall_8()); }
		ruleIfElse
		{ after(grammarAccess.getStatementAccess().getIfElseParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileParserRuleCall_9()); }
		ruleWhile
		{ after(grammarAccess.getStatementAccess().getWhileParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForParserRuleCall_10()); }
		ruleFor
		{ after(grammarAccess.getStatementAccess().getForParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_11()); }
		(rule__Statement__Group_11__0)
		{ after(grammarAccess.getStatementAccess().getGroup_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatementInit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementInitAccess().getVarDeclarationAssignParserRuleCall_0()); }
		ruleVarDeclarationAssign
		{ after(grammarAccess.getForStatementInitAccess().getVarDeclarationAssignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getForStatementInitAccess().getVarAssignParserRuleCall_1()); }
		ruleVarAssign
		{ after(grammarAccess.getForStatementInitAccess().getVarAssignParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getVarAssignParserRuleCall_0()); }
		ruleVarAssign
		{ after(grammarAccess.getForStatementAccess().getVarAssignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getForStatementAccess().getIncrementParserRuleCall_1()); }
		ruleIncrement
		{ after(grammarAccess.getForStatementAccess().getIncrementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getForStatementAccess().getDecrementParserRuleCall_2()); }
		ruleDecrement
		{ after(grammarAccess.getForStatementAccess().getDecrementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
		'=='
		{ after(grammarAccess.getEqualityAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqualityAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getRelationAccess().getOperatorLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getRelationAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationAccess().getOperatorGreaterThanSignKeyword_1_1_0_2()); }
		'>'
		{ after(grammarAccess.getRelationAccess().getOperatorGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getRelationAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
		'%'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorPercentSignKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNullParserRuleCall_1()); }
		ruleNull
		{ after(grammarAccess.getPrimaryAccess().getNullParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getProcCallParserRuleCall_2()); }
		ruleProcCall
		{ after(grammarAccess.getPrimaryAccess().getProcCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVarExpressionParserRuleCall_3()); }
		ruleVarExpression
		{ after(grammarAccess.getPrimaryAccess().getVarExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNewArrayParserRuleCall_4()); }
		ruleNewArray
		{ after(grammarAccess.getPrimaryAccess().getNewArrayParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNewObjectParserRuleCall_5()); }
		ruleNewObject
		{ after(grammarAccess.getPrimaryAccess().getNewObjectParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_6()); }
		(rule__Primary__Group_6__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_7()); }
		(rule__Primary__Group_7__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getStaticAssignment_0()); }
	(rule__Constant__StaticAssignment_0)?
	{ after(grammarAccess.getConstantAccess().getStaticAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getFinalKeyword_1()); }
	'final'
	{ after(grammarAccess.getConstantAccess().getFinalKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getTypeAssignment_2()); }
	(rule__Constant__TypeAssignment_2)
	{ after(grammarAccess.getConstantAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getIdAssignment_3()); }
	(rule__Constant__IdAssignment_3)
	{ after(grammarAccess.getConstantAccess().getIdAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__4__Impl
	rule__Constant__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__5__Impl
	rule__Constant__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getValueAssignment_5()); }
	(rule__Constant__ValueAssignment_5)
	{ after(grammarAccess.getConstantAccess().getValueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getConstantAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group__0__Impl
	rule__Record__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getClassKeyword_0()); }
	'class'
	{ after(grammarAccess.getRecordAccess().getClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group__1__Impl
	rule__Record__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getIdAssignment_1()); }
	(rule__Record__IdAssignment_1)
	{ after(grammarAccess.getRecordAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group__2__Impl
	rule__Record__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRecordAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group__3__Impl
	rule__Record__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getGroup_3()); }
	(rule__Record__Group_3__0)*
	{ after(grammarAccess.getRecordAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRecordAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Record__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group_3__0__Impl
	rule__Record__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getFieldsAssignment_3_0()); }
	(rule__Record__FieldsAssignment_3_0)
	{ after(grammarAccess.getRecordAccess().getFieldsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Record__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordAccess().getSemicolonKeyword_3_1()); }
	';'
	{ after(grammarAccess.getRecordAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getCommentAssignment_0()); }
	(rule__Procedure__CommentAssignment_0)?
	{ after(grammarAccess.getProcedureAccess().getCommentAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getStaticAssignment_1()); }
	(rule__Procedure__StaticAssignment_1)?
	{ after(grammarAccess.getProcedureAccess().getStaticAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getAlternatives_2()); }
	(rule__Procedure__Alternatives_2)
	{ after(grammarAccess.getProcedureAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getIdAssignment_3()); }
	(rule__Procedure__IdAssignment_3)
	{ after(grammarAccess.getProcedureAccess().getIdAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__4__Impl
	rule__Procedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__5__Impl
	rule__Procedure__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getGroup_5()); }
	(rule__Procedure__Group_5__0)?
	{ after(grammarAccess.getProcedureAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__6__Impl
	rule__Procedure__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getBodyAssignment_7()); }
	(rule__Procedure__BodyAssignment_7)
	{ after(grammarAccess.getProcedureAccess().getBodyAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_5__0__Impl
	rule__Procedure__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getParamsAssignment_5_0()); }
	(rule__Procedure__ParamsAssignment_5_0)
	{ after(grammarAccess.getProcedureAccess().getParamsAssignment_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getGroup_5_1()); }
	(rule__Procedure__Group_5_1__0)*
	{ after(grammarAccess.getProcedureAccess().getGroup_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group_5_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_5_1__0__Impl
	rule__Procedure__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0()); }
	','
	{ after(grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Procedure__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group_5_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAccess().getParamsAssignment_5_1_1()); }
	(rule__Procedure__ParamsAssignment_5_1_1)
	{ after(grammarAccess.getProcedureAccess().getParamsAssignment_5_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
	(rule__Block__StatementsAssignment_2)*
	{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_0()); }
	ruleReturn
	{ after(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getBreakParserRuleCall_1_0()); }
	ruleBreak
	{ after(grammarAccess.getStatementAccess().getBreakParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_2__0__Impl
	rule__Statement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getContinueParserRuleCall_2_0()); }
	ruleContinue
	{ after(grammarAccess.getStatementAccess().getContinueParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_2_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__0__Impl
	rule__Statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getVarDeclarationAssignParserRuleCall_3_0()); }
	ruleVarDeclarationAssign
	{ after(grammarAccess.getStatementAccess().getVarDeclarationAssignParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_3_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__0__Impl
	rule__Statement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_4_0()); }
	ruleVarAssign
	{ after(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_5__0__Impl
	rule__Statement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getIncrementParserRuleCall_5_0()); }
	ruleIncrement
	{ after(grammarAccess.getStatementAccess().getIncrementParserRuleCall_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_5_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_6__0__Impl
	rule__Statement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getDecrementParserRuleCall_6_0()); }
	ruleDecrement
	{ after(grammarAccess.getStatementAccess().getDecrementParserRuleCall_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_6_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_7__0__Impl
	rule__Statement__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getProcCallParserRuleCall_7_0()); }
	ruleProcCall
	{ after(grammarAccess.getStatementAccess().getProcCallParserRuleCall_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_7_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_11__0__Impl
	rule__Statement__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getDoWhileParserRuleCall_11_0()); }
	ruleDoWhile
	{ after(grammarAccess.getStatementAccess().getDoWhileParserRuleCall_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_11_1()); }
	';'
	{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnAction_0()); }
	()
	{ after(grammarAccess.getReturnAccess().getReturnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__1__Impl
	rule__Return__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getReturnAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Return__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnAccess().getExpAssignment_2()); }
	(rule__Return__ExpAssignment_2)?
	{ after(grammarAccess.getReturnAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Break__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Break__Group__0__Impl
	rule__Break__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakAccess().getBreakAction_0()); }
	()
	{ after(grammarAccess.getBreakAccess().getBreakAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Break__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Break__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakAccess().getBreakKeyword_1()); }
	'break'
	{ after(grammarAccess.getBreakAccess().getBreakKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Continue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continue__Group__0__Impl
	rule__Continue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Continue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueAccess().getContinueAction_0()); }
	()
	{ after(grammarAccess.getContinueAccess().getContinueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Continue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Continue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Continue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueAccess().getContinueKeyword_1()); }
	'continue'
	{ after(grammarAccess.getContinueAccess().getContinueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
	(rule__VarDeclaration__TypeAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getIdAssignment_1()); }
	(rule__VarDeclaration__IdAssignment_1)
	{ after(grammarAccess.getVarDeclarationAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclarationAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclarationAssign__Group__0__Impl
	rule__VarDeclarationAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAssignAccess().getTypeAssignment_0()); }
	(rule__VarDeclarationAssign__TypeAssignment_0)
	{ after(grammarAccess.getVarDeclarationAssignAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclarationAssign__Group__1__Impl
	rule__VarDeclarationAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAssignAccess().getIdAssignment_1()); }
	(rule__VarDeclarationAssign__IdAssignment_1)
	{ after(grammarAccess.getVarDeclarationAssignAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclarationAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAssignAccess().getGroup_2()); }
	(rule__VarDeclarationAssign__Group_2__0)?
	{ after(grammarAccess.getVarDeclarationAssignAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclarationAssign__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclarationAssign__Group_2__0__Impl
	rule__VarDeclarationAssign__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAssignAccess().getEqualsSignKeyword_2_0()); }
	'='
	{ after(grammarAccess.getVarDeclarationAssignAccess().getEqualsSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclarationAssign__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAssignAccess().getInitAssignment_2_1()); }
	(rule__VarDeclarationAssign__InitAssignment_2_1)
	{ after(grammarAccess.getVarDeclarationAssignAccess().getInitAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarAssign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__0__Impl
	rule__VarAssign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getVarAssignment_0()); }
	(rule__VarAssign__VarAssignment_0)
	{ after(grammarAccess.getVarAssignAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__1__Impl
	rule__VarAssign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssign__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignAccess().getExpAssignment_2()); }
	(rule__VarAssign__ExpAssignment_2)
	{ after(grammarAccess.getVarAssignAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__0__Impl
	rule__IfElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__1__Impl
	rule__IfElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfElseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__2__Impl
	rule__IfElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getGuardAssignment_2()); }
	(rule__IfElse__GuardAssignment_2)
	{ after(grammarAccess.getIfElseAccess().getGuardAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__3__Impl
	rule__IfElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfElseAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__4__Impl
	rule__IfElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getSelectionBlockAssignment_4()); }
	(rule__IfElse__SelectionBlockAssignment_4)
	{ after(grammarAccess.getIfElseAccess().getSelectionBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getGroup_5()); }
	(rule__IfElse__Group_5__0)?
	{ after(grammarAccess.getIfElseAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElse__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group_5__0__Impl
	rule__IfElse__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getElseKeyword_5_0()); }
	'else'
	{ after(grammarAccess.getIfElseAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getAlternativeBlockAssignment_5_1()); }
	(rule__IfElse__AlternativeBlockAssignment_5_1)
	{ after(grammarAccess.getIfElseAccess().getAlternativeBlockAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getGuardAssignment_2()); }
	(rule__While__GuardAssignment_2)
	{ after(grammarAccess.getWhileAccess().getGuardAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getBlockAssignment_4()); }
	(rule__While__BlockAssignment_4)
	{ after(grammarAccess.getWhileAccess().getBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getGroup_2()); }
	(rule__For__Group_2__0)?
	{ after(grammarAccess.getForAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getGuardAssignment_4()); }
	(rule__For__GuardAssignment_4)
	{ after(grammarAccess.getForAccess().getGuardAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getForAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getGroup_6()); }
	(rule__For__Group_6__0)?
	{ after(grammarAccess.getForAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getForAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getBlockAssignment_8()); }
	(rule__For__BlockAssignment_8)
	{ after(grammarAccess.getForAccess().getBlockAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_2__0__Impl
	rule__For__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getInitStatementsAssignment_2_0()); }
	(rule__For__InitStatementsAssignment_2_0)
	{ after(grammarAccess.getForAccess().getInitStatementsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getGroup_2_1()); }
	(rule__For__Group_2_1__0)*
	{ after(grammarAccess.getForAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_2_1__0__Impl
	rule__For__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getForAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getInitStatementsAssignment_2_1_1()); }
	(rule__For__InitStatementsAssignment_2_1_1)
	{ after(grammarAccess.getForAccess().getInitStatementsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_6__0__Impl
	rule__For__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getProgressStatementsAssignment_6_0()); }
	(rule__For__ProgressStatementsAssignment_6_0)
	{ after(grammarAccess.getForAccess().getProgressStatementsAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getGroup_6_1()); }
	(rule__For__Group_6_1__0)*
	{ after(grammarAccess.getForAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_6_1__0__Impl
	rule__For__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCommaKeyword_6_1_0()); }
	','
	{ after(grammarAccess.getForAccess().getCommaKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getProgressStatementsAssignment_6_1_1()); }
	(rule__For__ProgressStatementsAssignment_6_1_1)
	{ after(grammarAccess.getForAccess().getProgressStatementsAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__0__Impl
	rule__DoWhile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getDoKeyword_0()); }
	'do'
	{ after(grammarAccess.getDoWhileAccess().getDoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__1__Impl
	rule__DoWhile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getBlockAssignment_1()); }
	(rule__DoWhile__BlockAssignment_1)
	{ after(grammarAccess.getDoWhileAccess().getBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__2__Impl
	rule__DoWhile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getWhileKeyword_2()); }
	'while'
	{ after(grammarAccess.getDoWhileAccess().getWhileKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__3__Impl
	rule__DoWhile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getDoWhileAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__4__Impl
	rule__DoWhile__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getGuardAssignment_4()); }
	(rule__DoWhile__GuardAssignment_4)
	{ after(grammarAccess.getDoWhileAccess().getGuardAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhile__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Increment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__0__Impl
	rule__Increment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getIdAssignment_0()); }
	(rule__Increment__IdAssignment_0)
	{ after(grammarAccess.getIncrementAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Increment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncrementAccess().getPlusSignPlusSignKeyword_1()); }
	'++'
	{ after(grammarAccess.getIncrementAccess().getPlusSignPlusSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decrement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__0__Impl
	rule__Decrement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getIdAssignment_0()); }
	(rule__Decrement__IdAssignment_0)
	{ after(grammarAccess.getDecrementAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decrement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecrementAccess().getHyphenMinusHyphenMinusKeyword_1()); }
	'--'
	{ after(grammarAccess.getDecrementAccess().getHyphenMinusHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getXorParserRuleCall_0()); }
	ruleXor
	{ after(grammarAccess.getOrAccess().getXorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__0__Impl
	rule__Xor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getXorAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getGroup_1()); }
	(rule__Xor__Group_1__0)*
	{ after(grammarAccess.getXorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__0__Impl
	rule__Xor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__1__Impl
	rule__Xor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
	(rule__Xor__RightAssignment_1_2)
	{ after(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRelationParserRuleCall_0()); }
	ruleRelation
	{ after(grammarAccess.getEqualityAccess().getRelationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
	(rule__Equality__Group_1__0)*
	{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getOperatorAssignment_1_1()); }
	(rule__Equality__OperatorAssignment_1_1)
	{ after(grammarAccess.getEqualityAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
	(rule__Equality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
	{ after(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getGroup_1()); }
	(rule__Relation__Group_1__0)*
	{ after(grammarAccess.getRelationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group_1__0__Impl
	rule__Relation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRelationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelationAccess().getRelationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group_1__1__Impl
	rule__Relation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getOperatorAssignment_1_1()); }
	(rule__Relation__OperatorAssignment_1_1)
	{ after(grammarAccess.getRelationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRightAssignment_1_2()); }
	(rule__Relation__RightAssignment_1_2)
	{ after(grammarAccess.getRelationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_6__0__Impl
	rule__Primary__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_6_0()); }
	'!'
	{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getPrimaryParserRuleCall_6_1()); }
	rulePrimary
	{ after(grammarAccess.getPrimaryAccess().getPrimaryParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_7__0__Impl
	rule__Primary__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_7_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_7__1__Impl
	rule__Primary__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_7_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_7_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Null__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Null__Group__0__Impl
	rule__Null__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullAccess().getNullAction_0()); }
	()
	{ after(grammarAccess.getNullAccess().getNullAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Null__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullAccess().getNullKeyword_1()); }
	'null'
	{ after(grammarAccess.getNullAccess().getNullKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group__0__Impl
	rule__VarExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getGroup_0()); }
	(rule__VarExpression__Group_0__0)
	{ after(grammarAccess.getVarExpressionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getGroup_1()); }
	(rule__VarExpression__Group_1__0)*
	{ after(grammarAccess.getVarExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_0__0__Impl
	rule__VarExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getPartsAssignment_0_0()); }
	(rule__VarExpression__PartsAssignment_0_0)
	{ after(grammarAccess.getVarExpressionAccess().getPartsAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getGroup_0_1()); }
	(rule__VarExpression__Group_0_1__0)*
	{ after(grammarAccess.getVarExpressionAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_0_1__0__Impl
	rule__VarExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_0_1_0()); }
	'['
	{ after(grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_0_1__1__Impl
	rule__VarExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_0_1_1()); }
	(rule__VarExpression__ArrayIndexesAssignment_0_1_1)
	{ after(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_0_1_2()); }
	']'
	{ after(grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1__0__Impl
	rule__VarExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getVarExpressionAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1__1__Impl
	rule__VarExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getPartsAssignment_1_1()); }
	(rule__VarExpression__PartsAssignment_1_1)
	{ after(grammarAccess.getVarExpressionAccess().getPartsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getGroup_1_2()); }
	(rule__VarExpression__Group_1_2__0)*
	{ after(grammarAccess.getVarExpressionAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarExpression__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1_2__0__Impl
	rule__VarExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_1_2_0()); }
	'['
	{ after(grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1_2__1__Impl
	rule__VarExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_1_2_1()); }
	(rule__VarExpression__ArrayIndexesAssignment_1_2_1)
	{ after(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_1_2_2()); }
	']'
	{ after(grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__0__Impl
	rule__ProcCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getIdAssignment_0()); }
	(rule__ProcCall__IdAssignment_0)
	{ after(grammarAccess.getProcCallAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__1__Impl
	rule__ProcCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__2__Impl
	rule__ProcCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getGroup_2()); }
	(rule__ProcCall__Group_2__0)?
	{ after(grammarAccess.getProcCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getProcCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_2__0__Impl
	rule__ProcCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getArgsAssignment_2_0()); }
	(rule__ProcCall__ArgsAssignment_2_0)
	{ after(grammarAccess.getProcCallAccess().getArgsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getGroup_2_1()); }
	(rule__ProcCall__Group_2_1__0)*
	{ after(grammarAccess.getProcCallAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcCall__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_2_1__0__Impl
	rule__ProcCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getProcCallAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcCallAccess().getArgsAssignment_2_1_1()); }
	(rule__ProcCall__ArgsAssignment_2_1_1)
	{ after(grammarAccess.getProcCallAccess().getArgsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getIdAssignment_0()); }
	(rule__Type__IdAssignment_0)
	{ after(grammarAccess.getTypeAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getGroup_1()); }
	(rule__Type__Group_1__0)*
	{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getArrayDimsAssignment_1_0()); }
	(rule__Type__ArrayDimsAssignment_1_0)
	{ after(grammarAccess.getTypeAccess().getArrayDimsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1()); }
	']'
	{ after(grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewArray__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group__0__Impl
	rule__NewArray__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewArrayAccess().getNewKeyword_0()); }
	'new'
	{ after(grammarAccess.getNewArrayAccess().getNewKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group__1__Impl
	rule__NewArray__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewArrayAccess().getTypeAssignment_1()); }
	(rule__NewArray__TypeAssignment_1)
	{ after(grammarAccess.getNewArrayAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNewArrayAccess().getGroup_2()); }
		(rule__NewArray__Group_2__0)
		{ after(grammarAccess.getNewArrayAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getNewArrayAccess().getGroup_2()); }
		(rule__NewArray__Group_2__0)*
		{ after(grammarAccess.getNewArrayAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewArray__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group_2__0__Impl
	rule__NewArray__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewArrayAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getNewArrayAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group_2__1__Impl
	rule__NewArray__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewArrayAccess().getArrayDimsAssignment_2_1()); }
	(rule__NewArray__ArrayDimsAssignment_2_1)
	{ after(grammarAccess.getNewArrayAccess().getArrayDimsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewArray__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewArrayAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getNewArrayAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewObject__Group__0__Impl
	rule__NewObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewObjectAccess().getNewKeyword_0()); }
	'new'
	{ after(grammarAccess.getNewObjectAccess().getNewKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewObject__Group__1__Impl
	rule__NewObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewObjectAccess().getTypeAssignment_1()); }
	(rule__NewObject__TypeAssignment_1)
	{ after(grammarAccess.getNewObjectAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewObject__Group__2__Impl
	rule__NewObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewObjectAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getNewObjectAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewObject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewObjectAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getNewObjectAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__ConstantsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getConstantsConstantParserRuleCall_0_0()); }
		ruleConstant
		{ after(grammarAccess.getModuleAccess().getConstantsConstantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__RecordsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getRecordsRecordParserRuleCall_1_0()); }
		ruleRecord
		{ after(grammarAccess.getModuleAccess().getRecordsRecordParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ProceduresAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getProceduresProcedureParserRuleCall_2_0()); }
		ruleProcedure
		{ after(grammarAccess.getModuleAccess().getProceduresProcedureParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__StaticAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getStaticStaticKeyword_0_0()); }
		(
			{ before(grammarAccess.getConstantAccess().getStaticStaticKeyword_0_0()); }
			'static'
			{ after(grammarAccess.getConstantAccess().getStaticStaticKeyword_0_0()); }
		)
		{ after(grammarAccess.getConstantAccess().getStaticStaticKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getConstantAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__IdAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIdIdentifierParserRuleCall_3_0()); }
		ruleIdentifier
		{ after(grammarAccess.getConstantAccess().getIdIdentifierParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getValueLiteralParserRuleCall_5_0()); }
		ruleLiteral
		{ after(grammarAccess.getConstantAccess().getValueLiteralParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecordAccess().getIdIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getRecordAccess().getIdIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Record__FieldsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecordAccess().getFieldsVarDeclarationParserRuleCall_3_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getRecordAccess().getFieldsVarDeclarationParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__CommentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getCommentML_COMMENT_DOCTerminalRuleCall_0_0()); }
		RULE_ML_COMMENT_DOC
		{ after(grammarAccess.getProcedureAccess().getCommentML_COMMENT_DOCTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__StaticAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getStaticStaticKeyword_1_0()); }
		(
			{ before(grammarAccess.getProcedureAccess().getStaticStaticKeyword_1_0()); }
			'static'
			{ after(grammarAccess.getProcedureAccess().getStaticStaticKeyword_1_0()); }
		)
		{ after(grammarAccess.getProcedureAccess().getStaticStaticKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__RetTypeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getRetTypeTypeParserRuleCall_2_0_0()); }
		ruleType
		{ after(grammarAccess.getProcedureAccess().getRetTypeTypeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__VoidAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getVoidVoidKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getProcedureAccess().getVoidVoidKeyword_2_1_0()); }
			'void'
			{ after(grammarAccess.getProcedureAccess().getVoidVoidKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getProcedureAccess().getVoidVoidKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__IdAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getIdIdentifierParserRuleCall_3_0()); }
		ruleIdentifier
		{ after(grammarAccess.getProcedureAccess().getIdIdentifierParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ParamsAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ParamsAssignment_5_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_1_1_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__BodyAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAccess().getBodyBlockParserRuleCall_7_0()); }
		ruleBlock
		{ after(grammarAccess.getProcedureAccess().getBodyBlockParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getVarDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getIdIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getVarDeclarationAccess().getIdIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAssignAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getVarDeclarationAssignAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAssignAccess().getIdIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getVarDeclarationAssignAccess().getIdIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationAssign__InitAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAssignAccess().getInitExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVarDeclarationAssignAccess().getInitExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignAccess().getVarVarExpressionParserRuleCall_0_0()); }
		ruleVarExpression
		{ after(grammarAccess.getVarAssignAccess().getVarVarExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssign__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getVarAssignAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__GuardAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getGuardExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfElseAccess().getGuardExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__SelectionBlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getSelectionBlockBlockParserRuleCall_4_0()); }
		ruleBlock
		{ after(grammarAccess.getIfElseAccess().getSelectionBlockBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__AlternativeBlockAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getAlternativeBlockBlockParserRuleCall_5_1_0()); }
		ruleBlock
		{ after(grammarAccess.getIfElseAccess().getAlternativeBlockBlockParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__GuardAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getGuardExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getGuardExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_4_0()); }
		ruleBlock
		{ after(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__InitStatementsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_0_0()); }
		ruleForStatementInit
		{ after(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__InitStatementsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_1_1_0()); }
		ruleForStatementInit
		{ after(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__GuardAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getGuardExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getForAccess().getGuardExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__ProgressStatementsAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_0_0()); }
		ruleForStatement
		{ after(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__ProgressStatementsAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_1_1_0()); }
		ruleForStatement
		{ after(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__BlockAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getBlockBlockParserRuleCall_8_0()); }
		ruleBlock
		{ after(grammarAccess.getForAccess().getBlockBlockParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__BlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileAccess().getBlockBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getDoWhileAccess().getBlockBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__GuardAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileAccess().getGuardExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getDoWhileAccess().getGuardExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Increment__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncrementAccess().getIdIdentifierParserRuleCall_0_0()); }
		ruleIdentifier
		{ after(grammarAccess.getIncrementAccess().getIdIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decrement__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecrementAccess().getIdIdentifierParserRuleCall_0_0()); }
		ruleIdentifier
		{ after(grammarAccess.getDecrementAccess().getIdIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0()); }
		ruleXor
		{ after(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getXorAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
		ruleEquality
		{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Equality__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightRelationParserRuleCall_1_2_0()); }
		ruleRelation
		{ after(grammarAccess.getEqualityAccess().getRightRelationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Relation__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getRelationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_2_0()); }
		ruleAddition
		{ after(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getValuePRIMITIVE_VALUETerminalRuleCall_0()); }
		RULE_PRIMITIVE_VALUE
		{ after(grammarAccess.getLiteralAccess().getValuePRIMITIVE_VALUETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__PartsAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_0_0_0()); }
		ruleIdentifier
		{ after(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__ArrayIndexesAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_0_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__PartsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_1_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarExpression__ArrayIndexesAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_1_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getIdIdentifierParserRuleCall_0_0()); }
		ruleIdentifier
		{ after(grammarAccess.getProcCallAccess().getIdIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ArgsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
		ruleExpression
		{ after(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcCall__ArgsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getIdIdentifierParserRuleCall_0_0()); }
		ruleIdentifier
		{ after(grammarAccess.getTypeAccess().getIdIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ArrayDimsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getArrayDimsLeftSquareBracketKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getTypeAccess().getArrayDimsLeftSquareBracketKeyword_1_0_0()); }
			'['
			{ after(grammarAccess.getTypeAccess().getArrayDimsLeftSquareBracketKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getTypeAccess().getArrayDimsLeftSquareBracketKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewArrayAccess().getTypeIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getNewArrayAccess().getTypeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewArray__ArrayDimsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewArrayAccess().getArrayDimsExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getNewArrayAccess().getArrayDimsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewObject__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewObjectAccess().getTypeIdentifierParserRuleCall_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getNewObjectAccess().getTypeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__IdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getIdIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getIdentifierAccess().getIdIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_INTEGER : '-'? ('0'..'9')+;

fragment RULE_DOUBLE : RULE_INTEGER '.' ('0'..'9')+;

fragment RULE_BOOLEAN : ('true'|'false');

RULE_PRIMITIVE_VALUE : (RULE_INTEGER|RULE_DOUBLE|RULE_BOOLEAN);

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT_DOC : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
