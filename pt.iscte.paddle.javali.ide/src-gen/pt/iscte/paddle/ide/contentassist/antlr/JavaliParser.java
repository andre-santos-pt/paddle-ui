/*
 * generated by Xtext 2.19.0
 */
package pt.iscte.paddle.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import pt.iscte.paddle.ide.contentassist.antlr.internal.InternalJavaliParser;
import pt.iscte.paddle.services.JavaliGrammarAccess;

public class JavaliParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JavaliGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JavaliGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModuleAccess().getAlternatives(), "rule__Module__Alternatives");
			builder.put(grammarAccess.getProcedureAccess().getAlternatives_2(), "rule__Procedure__Alternatives_2");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getForStatementInitAccess().getAlternatives(), "rule__ForStatementInit__Alternatives");
			builder.put(grammarAccess.getForStatementAccess().getAlternatives(), "rule__ForStatement__Alternatives");
			builder.put(grammarAccess.getEqualityAccess().getOperatorAlternatives_1_1_0(), "rule__Equality__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getRelationAccess().getOperatorAlternatives_1_1_0(), "rule__Relation__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0(), "rule__Addition__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getRecordAccess().getGroup(), "rule__Record__Group__0");
			builder.put(grammarAccess.getRecordAccess().getGroup_3(), "rule__Record__Group_3__0");
			builder.put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
			builder.put(grammarAccess.getProcedureAccess().getGroup_5(), "rule__Procedure__Group_5__0");
			builder.put(grammarAccess.getProcedureAccess().getGroup_5_1(), "rule__Procedure__Group_5_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_2(), "rule__Statement__Group_2__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_5(), "rule__Statement__Group_5__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_6(), "rule__Statement__Group_6__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_7(), "rule__Statement__Group_7__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_11(), "rule__Statement__Group_11__0");
			builder.put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
			builder.put(grammarAccess.getBreakAccess().getGroup(), "rule__Break__Group__0");
			builder.put(grammarAccess.getContinueAccess().getGroup(), "rule__Continue__Group__0");
			builder.put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
			builder.put(grammarAccess.getVarDeclarationAssignAccess().getGroup(), "rule__VarDeclarationAssign__Group__0");
			builder.put(grammarAccess.getVarDeclarationAssignAccess().getGroup_2(), "rule__VarDeclarationAssign__Group_2__0");
			builder.put(grammarAccess.getVarAssignAccess().getGroup(), "rule__VarAssign__Group__0");
			builder.put(grammarAccess.getIfElseAccess().getGroup(), "rule__IfElse__Group__0");
			builder.put(grammarAccess.getIfElseAccess().getGroup_5(), "rule__IfElse__Group_5__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
			builder.put(grammarAccess.getForAccess().getGroup_2(), "rule__For__Group_2__0");
			builder.put(grammarAccess.getForAccess().getGroup_2_1(), "rule__For__Group_2_1__0");
			builder.put(grammarAccess.getForAccess().getGroup_6(), "rule__For__Group_6__0");
			builder.put(grammarAccess.getForAccess().getGroup_6_1(), "rule__For__Group_6_1__0");
			builder.put(grammarAccess.getDoWhileAccess().getGroup(), "rule__DoWhile__Group__0");
			builder.put(grammarAccess.getIncrementAccess().getGroup(), "rule__Increment__Group__0");
			builder.put(grammarAccess.getDecrementAccess().getGroup(), "rule__Decrement__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getXorAccess().getGroup(), "rule__Xor__Group__0");
			builder.put(grammarAccess.getXorAccess().getGroup_1(), "rule__Xor__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup_1(), "rule__Relation__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_6(), "rule__Primary__Group_6__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_7(), "rule__Primary__Group_7__0");
			builder.put(grammarAccess.getNullAccess().getGroup(), "rule__Null__Group__0");
			builder.put(grammarAccess.getVarExpressionAccess().getGroup(), "rule__VarExpression__Group__0");
			builder.put(grammarAccess.getVarExpressionAccess().getGroup_0(), "rule__VarExpression__Group_0__0");
			builder.put(grammarAccess.getVarExpressionAccess().getGroup_0_1(), "rule__VarExpression__Group_0_1__0");
			builder.put(grammarAccess.getVarExpressionAccess().getGroup_1(), "rule__VarExpression__Group_1__0");
			builder.put(grammarAccess.getVarExpressionAccess().getGroup_1_2(), "rule__VarExpression__Group_1_2__0");
			builder.put(grammarAccess.getProcCallAccess().getGroup(), "rule__ProcCall__Group__0");
			builder.put(grammarAccess.getProcCallAccess().getGroup_2(), "rule__ProcCall__Group_2__0");
			builder.put(grammarAccess.getProcCallAccess().getGroup_2_1(), "rule__ProcCall__Group_2_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getNewArrayAccess().getGroup(), "rule__NewArray__Group__0");
			builder.put(grammarAccess.getNewArrayAccess().getGroup_2(), "rule__NewArray__Group_2__0");
			builder.put(grammarAccess.getNewObjectAccess().getGroup(), "rule__NewObject__Group__0");
			builder.put(grammarAccess.getModuleAccess().getConstantsAssignment_0(), "rule__Module__ConstantsAssignment_0");
			builder.put(grammarAccess.getModuleAccess().getRecordsAssignment_1(), "rule__Module__RecordsAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getProceduresAssignment_2(), "rule__Module__ProceduresAssignment_2");
			builder.put(grammarAccess.getConstantAccess().getStaticAssignment_0(), "rule__Constant__StaticAssignment_0");
			builder.put(grammarAccess.getConstantAccess().getTypeAssignment_2(), "rule__Constant__TypeAssignment_2");
			builder.put(grammarAccess.getConstantAccess().getIdAssignment_3(), "rule__Constant__IdAssignment_3");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_5(), "rule__Constant__ValueAssignment_5");
			builder.put(grammarAccess.getRecordAccess().getIdAssignment_1(), "rule__Record__IdAssignment_1");
			builder.put(grammarAccess.getRecordAccess().getFieldsAssignment_3_0(), "rule__Record__FieldsAssignment_3_0");
			builder.put(grammarAccess.getProcedureAccess().getCommentAssignment_0(), "rule__Procedure__CommentAssignment_0");
			builder.put(grammarAccess.getProcedureAccess().getStaticAssignment_1(), "rule__Procedure__StaticAssignment_1");
			builder.put(grammarAccess.getProcedureAccess().getRetTypeAssignment_2_0(), "rule__Procedure__RetTypeAssignment_2_0");
			builder.put(grammarAccess.getProcedureAccess().getVoidAssignment_2_1(), "rule__Procedure__VoidAssignment_2_1");
			builder.put(grammarAccess.getProcedureAccess().getIdAssignment_3(), "rule__Procedure__IdAssignment_3");
			builder.put(grammarAccess.getProcedureAccess().getParamsAssignment_5_0(), "rule__Procedure__ParamsAssignment_5_0");
			builder.put(grammarAccess.getProcedureAccess().getParamsAssignment_5_1_1(), "rule__Procedure__ParamsAssignment_5_1_1");
			builder.put(grammarAccess.getProcedureAccess().getBodyAssignment_7(), "rule__Procedure__BodyAssignment_7");
			builder.put(grammarAccess.getBlockAccess().getStatementsAssignment_2(), "rule__Block__StatementsAssignment_2");
			builder.put(grammarAccess.getReturnAccess().getExpAssignment_2(), "rule__Return__ExpAssignment_2");
			builder.put(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0(), "rule__VarDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getVarDeclarationAccess().getIdAssignment_1(), "rule__VarDeclaration__IdAssignment_1");
			builder.put(grammarAccess.getVarDeclarationAssignAccess().getTypeAssignment_0(), "rule__VarDeclarationAssign__TypeAssignment_0");
			builder.put(grammarAccess.getVarDeclarationAssignAccess().getIdAssignment_1(), "rule__VarDeclarationAssign__IdAssignment_1");
			builder.put(grammarAccess.getVarDeclarationAssignAccess().getInitAssignment_2_1(), "rule__VarDeclarationAssign__InitAssignment_2_1");
			builder.put(grammarAccess.getVarAssignAccess().getVarAssignment_0(), "rule__VarAssign__VarAssignment_0");
			builder.put(grammarAccess.getVarAssignAccess().getExpAssignment_2(), "rule__VarAssign__ExpAssignment_2");
			builder.put(grammarAccess.getIfElseAccess().getGuardAssignment_2(), "rule__IfElse__GuardAssignment_2");
			builder.put(grammarAccess.getIfElseAccess().getSelectionBlockAssignment_4(), "rule__IfElse__SelectionBlockAssignment_4");
			builder.put(grammarAccess.getIfElseAccess().getAlternativeBlockAssignment_5_1(), "rule__IfElse__AlternativeBlockAssignment_5_1");
			builder.put(grammarAccess.getWhileAccess().getGuardAssignment_2(), "rule__While__GuardAssignment_2");
			builder.put(grammarAccess.getWhileAccess().getBlockAssignment_4(), "rule__While__BlockAssignment_4");
			builder.put(grammarAccess.getForAccess().getInitStatementsAssignment_2_0(), "rule__For__InitStatementsAssignment_2_0");
			builder.put(grammarAccess.getForAccess().getInitStatementsAssignment_2_1_1(), "rule__For__InitStatementsAssignment_2_1_1");
			builder.put(grammarAccess.getForAccess().getGuardAssignment_4(), "rule__For__GuardAssignment_4");
			builder.put(grammarAccess.getForAccess().getProgressStatementsAssignment_6_0(), "rule__For__ProgressStatementsAssignment_6_0");
			builder.put(grammarAccess.getForAccess().getProgressStatementsAssignment_6_1_1(), "rule__For__ProgressStatementsAssignment_6_1_1");
			builder.put(grammarAccess.getForAccess().getBlockAssignment_8(), "rule__For__BlockAssignment_8");
			builder.put(grammarAccess.getDoWhileAccess().getBlockAssignment_1(), "rule__DoWhile__BlockAssignment_1");
			builder.put(grammarAccess.getDoWhileAccess().getGuardAssignment_4(), "rule__DoWhile__GuardAssignment_4");
			builder.put(grammarAccess.getIncrementAccess().getIdAssignment_0(), "rule__Increment__IdAssignment_0");
			builder.put(grammarAccess.getDecrementAccess().getIdAssignment_0(), "rule__Decrement__IdAssignment_0");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getXorAccess().getRightAssignment_1_2(), "rule__Xor__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityAccess().getOperatorAssignment_1_1(), "rule__Equality__OperatorAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationAccess().getOperatorAssignment_1_1(), "rule__Relation__OperatorAssignment_1_1");
			builder.put(grammarAccess.getRelationAccess().getRightAssignment_1_2(), "rule__Relation__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1(), "rule__Addition__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getLiteralAccess().getValueAssignment(), "rule__Literal__ValueAssignment");
			builder.put(grammarAccess.getVarExpressionAccess().getPartsAssignment_0_0(), "rule__VarExpression__PartsAssignment_0_0");
			builder.put(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_0_1_1(), "rule__VarExpression__ArrayIndexesAssignment_0_1_1");
			builder.put(grammarAccess.getVarExpressionAccess().getPartsAssignment_1_1(), "rule__VarExpression__PartsAssignment_1_1");
			builder.put(grammarAccess.getVarExpressionAccess().getArrayIndexesAssignment_1_2_1(), "rule__VarExpression__ArrayIndexesAssignment_1_2_1");
			builder.put(grammarAccess.getProcCallAccess().getIdAssignment_0(), "rule__ProcCall__IdAssignment_0");
			builder.put(grammarAccess.getProcCallAccess().getArgsAssignment_2_0(), "rule__ProcCall__ArgsAssignment_2_0");
			builder.put(grammarAccess.getProcCallAccess().getArgsAssignment_2_1_1(), "rule__ProcCall__ArgsAssignment_2_1_1");
			builder.put(grammarAccess.getTypeAccess().getIdAssignment_0(), "rule__Type__IdAssignment_0");
			builder.put(grammarAccess.getTypeAccess().getArrayDimsAssignment_1_0(), "rule__Type__ArrayDimsAssignment_1_0");
			builder.put(grammarAccess.getNewArrayAccess().getTypeAssignment_1(), "rule__NewArray__TypeAssignment_1");
			builder.put(grammarAccess.getNewArrayAccess().getArrayDimsAssignment_2_1(), "rule__NewArray__ArrayDimsAssignment_2_1");
			builder.put(grammarAccess.getNewObjectAccess().getTypeAssignment_1(), "rule__NewObject__TypeAssignment_1");
			builder.put(grammarAccess.getIdentifierAccess().getIdAssignment(), "rule__Identifier__IdAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JavaliGrammarAccess grammarAccess;

	@Override
	protected InternalJavaliParser createParser() {
		InternalJavaliParser result = new InternalJavaliParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT" };
	}

	public JavaliGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JavaliGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
