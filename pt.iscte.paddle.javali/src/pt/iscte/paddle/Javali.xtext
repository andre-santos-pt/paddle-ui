grammar pt.iscte.paddle.Javali hidden(WS, SL_COMMENT, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate javali "http://www.iscte.pt/paddle/Javali"

Module:
	(constants+=Constant |
	records+=Record |
	procedures+=Procedure)*
;
	
//TypeDef returns Module:
//	{TypeDef} (
//	//(visibility=AccessModifier)?
//	'class' id=Identifier '{' 
//	(
//		constants+=Constant |
//		procedures+=Procedure |
//		(fields+=VarDeclaration ';')
//	)*
//	'}'
//	)?
//;
//
//StaticClass:
//	{StaticClass} 
//	(constants+=Constant |
//	records+=Record |
//	procedures+=Procedure)+
//;

Constant:
	(static ?= 'static')? 'final' type=Type id=Identifier '=' value=Literal ';'
;

Record:
	'class' id=Identifier '{'
		(fields+=VarDeclaration ';')*
	'}'
;
	
Procedure:
	(comment=ML_COMMENT_DOC)?
	//(visibility=AccessModifier)?
	(static ?= 'static')? (retType=Type|void?='void') id=Identifier '(' (params+=VarDeclaration (',' params+=VarDeclaration)*)? ')' body=Block
;


Block:
	{Block} '{' (statements+=Statement)* '}'
;

Statement:
	(Return ';' | Break ';' | Continue ';' | VarDeclarationAssign ';' | VarAssign ';' | Increment ';' | Decrement ';' | ProcCall ';' | IfElse | While | For | DoWhile ';')  //| Block)
;

Return:
	{Return} 'return' (exp=Expression)?
;

Break: {Break}
	'break'
;

Continue: {Continue}
	'continue'
;

VarDeclaration:
	type=Type id=Identifier
;

VarDeclarationAssign returns VarDeclaration:
	type=Type id=Identifier ('=' init=Expression)?
;

VarAssign:
	var=VarExpression '=' exp=Expression
;


IfElse:
	'if' '(' guard=Expression ')' selectionBlock=Block
	('else' alternativeBlock=Block)?
;

While:
	'while' '(' guard=Expression ')' block=Block
;

For:
	'for' '(' (initStatements+=ForStatementInit (',' initStatements+=ForStatementInit)*)? ';' guard=Expression ';' (progressStatements+=ForStatement (',' progressStatements+=ForStatement)*)? ')' block=Block
;

DoWhile:
	'do' block=Block 'while' '(' guard=Expression ')'
;

ForStatementInit returns Statement:
	VarDeclarationAssign | VarAssign
;

ForStatement returns Statement:
	VarAssign | Increment | Decrement
;

Increment:
	(id=Identifier '++') // | ('++' id=IDENTIFIER)
;

Decrement:
	(id=Identifier '--') // | ('--' id=IDENTIFIER)
;



//BinaryExpression returns Expression:
//	Or | Xor | And | Equality | Relation | Addition | Multiplication
//;

Expression:
	Or  //(conditional+='?' trueCase+=Expression ':' falseCase+=Expression)?
;

Or returns Expression:
	Xor ({Or.left=current} '||' right=Xor)*
;

Xor returns Expression:
	And ({Xor.left=current} '^' right=And)*
;

And returns Expression:
	Equality ({And.left=current} '&&' right=Equality)*
;

Equality returns Expression:
	Relation ({Equality.left=current} operator=('=='|'!=') right=Relation)*
;

Relation returns Expression:
	Addition ({Relation.left=current} operator=('<'|'<='|'>'|'>=') right=Addition)*
;

Addition returns Expression:
  Multiplication ({Addition.left=current} operator=('+'|'-') right=Multiplication)*
;
 
Multiplication returns Expression:
  Primary ({Multiplication.left=current} operator=('*'|'/'|'%') right=Primary)*
;

Primary returns Expression:
  Literal | Null | ProcCall | VarExpression | NewArray | NewObject | '!' Primary | '(' Expression ')'
;
 
//UnaryExpression returns Expression:
//	uoperator=('!') expression=Primary
//;

Literal:
	value=PRIMITIVE_VALUE
;

Null:
	{Null} 'null'
;

VarExpression:
	(parts+=Identifier ('['arrayIndexes += Expression ']')*)('.' parts+=Identifier ('['arrayIndexes += Expression ']')*)*
;

ProcCall:
	id=Identifier '(' (args+=Expression (',' args+=Expression)* )? ')'
;

Type:
	id=Identifier (arrayDims+='['']')*
;

NewArray:
	'new' type=Identifier ('[' arrayDims+=Expression ']')+
;

NewObject:
	'new' type=Identifier '(' ')'
;

Identifier:
	id=ID
;

//PrimitiveIdentifier returns Identifier:
//	id=PRIMITIVE_TYPE
//;

//AccessModifier:
//	'public'|'private'|'protected'
//;

//ConditionalExpression returns Expression:
//	expression=Expression '?' left=Expression ':' right=Expression
//;


//Annotation:
//	'@' id=IDENTIFIER
//;


terminal INTEGER: '-'?('0'..'9')+;
terminal DOUBLE: INTEGER '.' ('0'..'9')+ ;
terminal BOOLEAN: 'true'|'false' ;
terminal PRIMITIVE_VALUE: INTEGER| DOUBLE | BOOLEAN;
//terminal PRIMITIVE_TYPE: 'int' | 'double' | 'boolean';
terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal ML_COMMENT_DOC : '/**' -> '*/';
terminal ML_COMMENT : '/*'!'*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

