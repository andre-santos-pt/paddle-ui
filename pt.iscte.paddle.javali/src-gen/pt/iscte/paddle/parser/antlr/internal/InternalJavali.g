/*
 * generated by Xtext 2.19.0
 */
grammar InternalJavali;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package pt.iscte.paddle.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package pt.iscte.paddle.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import pt.iscte.paddle.services.JavaliGrammarAccess;

}

@parser::members {

 	private JavaliGrammarAccess grammarAccess;

    public InternalJavaliParser(TokenStream input, JavaliGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Module";
   	}

   	@Override
   	protected JavaliGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getConstantsConstantParserRuleCall_0_0());
				}
				lv_constants_0_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"constants",
						lv_constants_0_0,
						"pt.iscte.paddle.Javali.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getRecordsRecordParserRuleCall_1_0());
				}
				lv_records_1_0=ruleRecord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"records",
						lv_records_1_0,
						"pt.iscte.paddle.Javali.Record");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getProceduresProcedureParserRuleCall_2_0());
				}
				lv_procedures_2_0=ruleProcedure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					add(
						$current,
						"procedures",
						lv_procedures_2_0,
						"pt.iscte.paddle.Javali.Procedure");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_static_0_0='static'
				{
					newLeafNode(lv_static_0_0, grammarAccess.getConstantAccess().getStaticStaticKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "static", true, "static");
				}
			)
		)?
		otherlv_1='final'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getFinalKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"pt.iscte.paddle.Javali.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getIdIdentifierParserRuleCall_3_0());
				}
				lv_id_3_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"id",
						lv_id_3_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getValueLiteralParserRuleCall_5_0());
				}
				lv_value_5_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"pt.iscte.paddle.Javali.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getConstantAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleRecord
entryRuleRecord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordRule()); }
	iv_ruleRecord=ruleRecord
	{ $current=$iv_ruleRecord.current; }
	EOF;

// Rule Record
ruleRecord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getRecordAccess().getClassKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordAccess().getIdIdentifierParserRuleCall_1_0());
				}
				lv_id_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRecordAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRecordAccess().getFieldsVarDeclarationParserRuleCall_3_0_0());
					}
					lv_fields_3_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRecordRule());
						}
						add(
							$current,
							"fields",
							lv_fields_3_0,
							"pt.iscte.paddle.Javali.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getRecordAccess().getSemicolonKeyword_3_1());
			}
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getRecordAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	iv_ruleProcedure=ruleProcedure
	{ $current=$iv_ruleProcedure.current; }
	EOF;

// Rule Procedure
ruleProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_comment_0_0=RULE_ML_COMMENT_DOC
				{
					newLeafNode(lv_comment_0_0, grammarAccess.getProcedureAccess().getCommentML_COMMENT_DOCTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedureRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_0_0,
						"pt.iscte.paddle.Javali.ML_COMMENT_DOC");
				}
			)
		)?
		(
			(
				lv_static_1_0='static'
				{
					newLeafNode(lv_static_1_0, grammarAccess.getProcedureAccess().getStaticStaticKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcedureRule());
					}
					setWithLastConsumed($current, "static", true, "static");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedureAccess().getRetTypeTypeParserRuleCall_2_0_0());
					}
					lv_retType_2_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedureRule());
						}
						set(
							$current,
							"retType",
							lv_retType_2_0,
							"pt.iscte.paddle.Javali.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_void_3_0='void'
					{
						newLeafNode(lv_void_3_0, grammarAccess.getProcedureAccess().getVoidVoidKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcedureRule());
						}
						setWithLastConsumed($current, "void", true, "void");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getIdIdentifierParserRuleCall_3_0());
				}
				lv_id_4_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					set(
						$current,
						"id",
						lv_id_4_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_0_0());
					}
					lv_params_6_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcedureRule());
						}
						add(
							$current,
							"params",
							lv_params_6_0,
							"pt.iscte.paddle.Javali.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProcedureAccess().getParamsVarDeclarationParserRuleCall_5_1_1_0());
						}
						lv_params_8_0=ruleVarDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcedureRule());
							}
							add(
								$current,
								"params",
								lv_params_8_0,
								"pt.iscte.paddle.Javali.VarDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAccess().getBodyBlockParserRuleCall_7_0());
				}
				lv_body_10_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"pt.iscte.paddle.Javali.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"pt.iscte.paddle.Javali.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnParserRuleCall_0_0());
			}
			this_Return_0=ruleReturn
			{
				$current = $this_Return_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getBreakParserRuleCall_1_0());
			}
			this_Break_2=ruleBreak
			{
				$current = $this_Break_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getContinueParserRuleCall_2_0());
			}
			this_Continue_4=ruleContinue
			{
				$current = $this_Continue_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getSemicolonKeyword_2_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getVarDeclarationAssignParserRuleCall_3_0());
			}
			this_VarDeclarationAssign_6=ruleVarDeclarationAssign
			{
				$current = $this_VarDeclarationAssign_6.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getSemicolonKeyword_3_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_4_0());
			}
			this_VarAssign_8=ruleVarAssign
			{
				$current = $this_VarAssign_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getSemicolonKeyword_4_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getIncrementParserRuleCall_5_0());
			}
			this_Increment_10=ruleIncrement
			{
				$current = $this_Increment_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getSemicolonKeyword_5_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDecrementParserRuleCall_6_0());
			}
			this_Decrement_12=ruleDecrement
			{
				$current = $this_Decrement_12.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getSemicolonKeyword_6_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getProcCallParserRuleCall_7_0());
			}
			this_ProcCall_14=ruleProcCall
			{
				$current = $this_ProcCall_14.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_15=';'
			{
				newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_7_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfElseParserRuleCall_8());
		}
		this_IfElse_16=ruleIfElse
		{
			$current = $this_IfElse_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileParserRuleCall_9());
		}
		this_While_17=ruleWhile
		{
			$current = $this_While_17.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForParserRuleCall_10());
		}
		this_For_18=ruleFor
		{
			$current = $this_For_18.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDoWhileParserRuleCall_11_0());
			}
			this_DoWhile_19=ruleDoWhile
			{
				$current = $this_DoWhile_19.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_20=';'
			{
				newLeafNode(otherlv_20, grammarAccess.getStatementAccess().getSemicolonKeyword_11_1());
			}
		)
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnAccess().getReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleBreak
entryRuleBreak returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBreakRule()); }
	iv_ruleBreak=ruleBreak
	{ $current=$iv_ruleBreak.current; }
	EOF;

// Rule Break
ruleBreak returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBreakAccess().getBreakAction_0(),
					$current);
			}
		)
		otherlv_1='break'
		{
			newLeafNode(otherlv_1, grammarAccess.getBreakAccess().getBreakKeyword_1());
		}
	)
;

// Entry rule entryRuleContinue
entryRuleContinue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContinueRule()); }
	iv_ruleContinue=ruleContinue
	{ $current=$iv_ruleContinue.current; }
	EOF;

// Rule Continue
ruleContinue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContinueAccess().getContinueAction_0(),
					$current);
			}
		)
		otherlv_1='continue'
		{
			newLeafNode(otherlv_1, grammarAccess.getContinueAccess().getContinueKeyword_1());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"pt.iscte.paddle.Javali.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getIdIdentifierParserRuleCall_1_0());
				}
				lv_id_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclarationAssign
entryRuleVarDeclarationAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationAssignRule()); }
	iv_ruleVarDeclarationAssign=ruleVarDeclarationAssign
	{ $current=$iv_ruleVarDeclarationAssign.current; }
	EOF;

// Rule VarDeclarationAssign
ruleVarDeclarationAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAssignAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationAssignRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"pt.iscte.paddle.Javali.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAssignAccess().getIdIdentifierParserRuleCall_1_0());
				}
				lv_id_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationAssignRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVarDeclarationAssignAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAssignAccess().getInitExpressionParserRuleCall_2_1_0());
					}
					lv_init_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationAssignRule());
						}
						set(
							$current,
							"init",
							lv_init_3_0,
							"pt.iscte.paddle.Javali.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVarAssign
entryRuleVarAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarAssignRule()); }
	iv_ruleVarAssign=ruleVarAssign
	{ $current=$iv_ruleVarAssign.current; }
	EOF;

// Rule VarAssign
ruleVarAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAssignAccess().getVarVarExpressionParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVarExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarAssignRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"pt.iscte.paddle.Javali.VarExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAssignAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarAssignRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfElse
entryRuleIfElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseRule()); }
	iv_ruleIfElse=ruleIfElse
	{ $current=$iv_ruleIfElse.current; }
	EOF;

// Rule IfElse
ruleIfElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfElseAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseAccess().getGuardExpressionParserRuleCall_2_0());
				}
				lv_guard_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseRule());
					}
					set(
						$current,
						"guard",
						lv_guard_2_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfElseAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseAccess().getSelectionBlockBlockParserRuleCall_4_0());
				}
				lv_selectionBlock_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseRule());
					}
					set(
						$current,
						"selectionBlock",
						lv_selectionBlock_4_0,
						"pt.iscte.paddle.Javali.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfElseAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfElseAccess().getAlternativeBlockBlockParserRuleCall_5_1_0());
					}
					lv_alternativeBlock_6_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfElseRule());
						}
						set(
							$current,
							"alternativeBlock",
							lv_alternativeBlock_6_0,
							"pt.iscte.paddle.Javali.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getGuardExpressionParserRuleCall_2_0());
				}
				lv_guard_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"guard",
						lv_guard_2_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"pt.iscte.paddle.Javali.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_0_0());
					}
					lv_initStatements_2_0=ruleForStatementInit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRule());
						}
						add(
							$current,
							"initStatements",
							lv_initStatements_2_0,
							"pt.iscte.paddle.Javali.ForStatementInit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getForAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForAccess().getInitStatementsForStatementInitParserRuleCall_2_1_1_0());
						}
						lv_initStatements_4_0=ruleForStatementInit
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForRule());
							}
							add(
								$current,
								"initStatements",
								lv_initStatements_4_0,
								"pt.iscte.paddle.Javali.ForStatementInit");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getGuardExpressionParserRuleCall_4_0());
				}
				lv_guard_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"guard",
						lv_guard_6_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getForAccess().getSemicolonKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_0_0());
					}
					lv_progressStatements_8_0=ruleForStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRule());
						}
						add(
							$current,
							"progressStatements",
							lv_progressStatements_8_0,
							"pt.iscte.paddle.Javali.ForStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getForAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getForAccess().getProgressStatementsForStatementParserRuleCall_6_1_1_0());
						}
						lv_progressStatements_10_0=ruleForStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getForRule());
							}
							add(
								$current,
								"progressStatements",
								lv_progressStatements_10_0,
								"pt.iscte.paddle.Javali.ForStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getForAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getBlockBlockParserRuleCall_8_0());
				}
				lv_block_12_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"block",
						lv_block_12_0,
						"pt.iscte.paddle.Javali.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoWhile
entryRuleDoWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoWhileRule()); }
	iv_ruleDoWhile=ruleDoWhile
	{ $current=$iv_ruleDoWhile.current; }
	EOF;

// Rule DoWhile
ruleDoWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='do'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoWhileAccess().getDoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"pt.iscte.paddle.Javali.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='while'
		{
			newLeafNode(otherlv_2, grammarAccess.getDoWhileAccess().getWhileKeyword_2());
		}
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getDoWhileAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileAccess().getGuardExpressionParserRuleCall_4_0());
				}
				lv_guard_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileRule());
					}
					set(
						$current,
						"guard",
						lv_guard_4_0,
						"pt.iscte.paddle.Javali.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleForStatementInit
entryRuleForStatementInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementInitRule()); }
	iv_ruleForStatementInit=ruleForStatementInit
	{ $current=$iv_ruleForStatementInit.current; }
	EOF;

// Rule ForStatementInit
ruleForStatementInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getForStatementInitAccess().getVarDeclarationAssignParserRuleCall_0());
		}
		this_VarDeclarationAssign_0=ruleVarDeclarationAssign
		{
			$current = $this_VarDeclarationAssign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getForStatementInitAccess().getVarAssignParserRuleCall_1());
		}
		this_VarAssign_1=ruleVarAssign
		{
			$current = $this_VarAssign_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getForStatementAccess().getVarAssignParserRuleCall_0());
		}
		this_VarAssign_0=ruleVarAssign
		{
			$current = $this_VarAssign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getForStatementAccess().getIncrementParserRuleCall_1());
		}
		this_Increment_1=ruleIncrement
		{
			$current = $this_Increment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getForStatementAccess().getDecrementParserRuleCall_2());
		}
		this_Decrement_2=ruleDecrement
		{
			$current = $this_Decrement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIncrement
entryRuleIncrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncrementRule()); }
	iv_ruleIncrement=ruleIncrement
	{ $current=$iv_ruleIncrement.current; }
	EOF;

// Rule Increment
ruleIncrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIncrementAccess().getIdIdentifierParserRuleCall_0_0());
				}
				lv_id_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncrementRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='++'
		{
			newLeafNode(otherlv_1, grammarAccess.getIncrementAccess().getPlusSignPlusSignKeyword_1());
		}
	)
;

// Entry rule entryRuleDecrement
entryRuleDecrement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecrementRule()); }
	iv_ruleDecrement=ruleDecrement
	{ $current=$iv_ruleDecrement.current; }
	EOF;

// Rule Decrement
ruleDecrement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDecrementAccess().getIdIdentifierParserRuleCall_0_0());
				}
				lv_id_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecrementRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='--'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecrementAccess().getHyphenMinusHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getXorParserRuleCall_0());
		}
		this_Xor_0=ruleXor
		{
			$current = $this_Xor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightXorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Xor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXor
entryRuleXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorRule()); }
	iv_ruleXor=ruleXor
	{ $current=$iv_ruleXor.current; }
	EOF;

// Rule Xor
ruleXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorAccess().getXorLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getXorAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getRelationParserRuleCall_0());
		}
		this_Relation_0=ruleRelation
		{
			$current = $this_Relation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='=='
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getEqualityAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='!='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getEqualityAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightRelationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0());
		}
		this_Addition_0=ruleAddition
		{
			$current = $this_Addition_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationAccess().getRelationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='<'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getRelationAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getRelationAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='>'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getRelationAccess().getOperatorGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='>='
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getRelationAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Addition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='%'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getMultiplicationAccess().getOperatorPercentSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"pt.iscte.paddle.Javali.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNullParserRuleCall_1());
		}
		this_Null_1=ruleNull
		{
			$current = $this_Null_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getProcCallParserRuleCall_2());
		}
		this_ProcCall_2=ruleProcCall
		{
			$current = $this_ProcCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVarExpressionParserRuleCall_3());
		}
		this_VarExpression_3=ruleVarExpression
		{
			$current = $this_VarExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNewArrayParserRuleCall_4());
		}
		this_NewArray_4=ruleNewArray
		{
			$current = $this_NewArray_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNewObjectParserRuleCall_5());
		}
		this_NewObject_5=ruleNewObject
		{
			$current = $this_NewObject_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_6='!'
			{
				newLeafNode(otherlv_6, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getPrimaryParserRuleCall_6_1());
			}
			this_Primary_7=rulePrimary
			{
				$current = $this_Primary_7.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_7_1());
			}
			this_Expression_9=ruleExpression
			{
				$current = $this_Expression_9.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_7_2());
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_PRIMITIVE_VALUE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getLiteralAccess().getValuePRIMITIVE_VALUETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"pt.iscte.paddle.Javali.PRIMITIVE_VALUE");
			}
		)
	)
;

// Entry rule entryRuleNull
entryRuleNull returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullRule()); }
	iv_ruleNull=ruleNull
	{ $current=$iv_ruleNull.current; }
	EOF;

// Rule Null
ruleNull returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullAccess().getNullAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getNullAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleVarExpression
entryRuleVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarExpressionRule()); }
	iv_ruleVarExpression=ruleVarExpression
	{ $current=$iv_ruleVarExpression.current; }
	EOF;

// Rule VarExpression
ruleVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_0_0_0());
					}
					lv_parts_0_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarExpressionRule());
						}
						add(
							$current,
							"parts",
							lv_parts_0_0,
							"pt.iscte.paddle.Javali.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_0_1_1_0());
						}
						lv_arrayIndexes_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarExpressionRule());
							}
							add(
								$current,
								"arrayIndexes",
								lv_arrayIndexes_2_0,
								"pt.iscte.paddle.Javali.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=']'
				{
					newLeafNode(otherlv_3, grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_0_1_2());
				}
			)*
		)
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getVarExpressionAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarExpressionAccess().getPartsIdentifierParserRuleCall_1_1_0());
					}
					lv_parts_5_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarExpressionRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"pt.iscte.paddle.Javali.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6='['
				{
					newLeafNode(otherlv_6, grammarAccess.getVarExpressionAccess().getLeftSquareBracketKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarExpressionAccess().getArrayIndexesExpressionParserRuleCall_1_2_1_0());
						}
						lv_arrayIndexes_7_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarExpressionRule());
							}
							add(
								$current,
								"arrayIndexes",
								lv_arrayIndexes_7_0,
								"pt.iscte.paddle.Javali.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_8=']'
				{
					newLeafNode(otherlv_8, grammarAccess.getVarExpressionAccess().getRightSquareBracketKeyword_1_2_2());
				}
			)*
		)*
	)
;

// Entry rule entryRuleProcCall
entryRuleProcCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcCallRule()); }
	iv_ruleProcCall=ruleProcCall
	{ $current=$iv_ruleProcCall.current; }
	EOF;

// Rule ProcCall
ruleProcCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcCallAccess().getIdIdentifierParserRuleCall_0_0());
				}
				lv_id_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcCallRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcCallRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"pt.iscte.paddle.Javali.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getProcCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProcCallAccess().getArgsExpressionParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcCallRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"pt.iscte.paddle.Javali.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getIdIdentifierParserRuleCall_0_0());
				}
				lv_id_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_arrayDims_1_0='['
					{
						newLeafNode(lv_arrayDims_1_0, grammarAccess.getTypeAccess().getArrayDimsLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						addWithLastConsumed($current, "arrayDims", lv_arrayDims_1_0, "[");
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuleNewArray
entryRuleNewArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewArrayRule()); }
	iv_ruleNewArray=ruleNewArray
	{ $current=$iv_ruleNewArray.current; }
	EOF;

// Rule NewArray
ruleNewArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewArrayAccess().getNewKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewArrayAccess().getTypeIdentifierParserRuleCall_1_0());
				}
				lv_type_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewArrayRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getNewArrayAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNewArrayAccess().getArrayDimsExpressionParserRuleCall_2_1_0());
					}
					lv_arrayDims_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNewArrayRule());
						}
						add(
							$current,
							"arrayDims",
							lv_arrayDims_3_0,
							"pt.iscte.paddle.Javali.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getNewArrayAccess().getRightSquareBracketKeyword_2_2());
			}
		)+
	)
;

// Entry rule entryRuleNewObject
entryRuleNewObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewObjectRule()); }
	iv_ruleNewObject=ruleNewObject
	{ $current=$iv_ruleNewObject.current; }
	EOF;

// Rule NewObject
ruleNewObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewObjectAccess().getNewKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewObjectAccess().getTypeIdentifierParserRuleCall_1_0());
				}
				lv_type_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewObjectRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"pt.iscte.paddle.Javali.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNewObjectAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNewObjectAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current; }
	EOF;

// Rule Identifier
ruleIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getIdentifierAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"pt.iscte.paddle.Javali.ID");
			}
		)
	)
;

fragment RULE_INTEGER : '-'? ('0'..'9')+;

fragment RULE_DOUBLE : RULE_INTEGER '.' ('0'..'9')+;

fragment RULE_BOOLEAN : ('true'|'false');

RULE_PRIMITIVE_VALUE : (RULE_INTEGER|RULE_DOUBLE|RULE_BOOLEAN);

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT_DOC : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
