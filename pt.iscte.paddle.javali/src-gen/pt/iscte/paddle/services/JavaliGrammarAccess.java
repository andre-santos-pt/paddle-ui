/*
 * generated by Xtext 2.19.0
 */
package pt.iscte.paddle.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JavaliGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Module");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantsConstantParserRuleCall_0_0 = (RuleCall)cConstantsAssignment_0.eContents().get(0);
		private final Assignment cRecordsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRecordsRecordParserRuleCall_1_0 = (RuleCall)cRecordsAssignment_1.eContents().get(0);
		private final Assignment cProceduresAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cProceduresProcedureParserRuleCall_2_0 = (RuleCall)cProceduresAssignment_2.eContents().get(0);
		
		//Module:
		//	(constants+=Constant | records+=Record | procedures+=Procedure)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(constants+=Constant | records+=Record | procedures+=Procedure)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constants+=Constant
		public Assignment getConstantsAssignment_0() { return cConstantsAssignment_0; }
		
		//Constant
		public RuleCall getConstantsConstantParserRuleCall_0_0() { return cConstantsConstantParserRuleCall_0_0; }
		
		//records+=Record
		public Assignment getRecordsAssignment_1() { return cRecordsAssignment_1; }
		
		//Record
		public RuleCall getRecordsRecordParserRuleCall_1_0() { return cRecordsRecordParserRuleCall_1_0; }
		
		//procedures+=Procedure
		public Assignment getProceduresAssignment_2() { return cProceduresAssignment_2; }
		
		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_2_0() { return cProceduresProcedureParserRuleCall_2_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIdentifierParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueLiteralParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////TypeDef returns Module:
		////	{TypeDef} (
		////	//(visibility=AccessModifier)?
		////	'class' id=Identifier '{' 
		////	(
		////		constants+=Constant |
		////		procedures+=Procedure |
		////		(fields+=VarDeclaration ';')
		////	)*
		////	'}'
		////	)?
		////;
		////
		////StaticClass:
		////	{StaticClass} 
		////	(constants+=Constant |
		////	records+=Record |
		////	procedures+=Procedure)+
		////;
		//Constant:
		//	static?='static'? 'final' type=Type id=Identifier '=' value=Literal ';';
		@Override public ParserRule getRule() { return rule; }
		
		//static?='static'? 'final' type=Type id=Identifier '=' value=Literal ';'
		public Group getGroup() { return cGroup; }
		
		//static?='static'?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_3_0() { return cIdIdentifierParserRuleCall_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//value=Literal
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_5_0() { return cValueLiteralParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RecordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Record");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFieldsVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cFieldsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Record:
		//	'class' id=Identifier '{' (fields+=VarDeclaration ';')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'class' id=Identifier '{' (fields+=VarDeclaration ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(fields+=VarDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//fields+=VarDeclaration
		public Assignment getFieldsAssignment_3_0() { return cFieldsAssignment_3_0; }
		
		//VarDeclaration
		public RuleCall getFieldsVarDeclarationParserRuleCall_3_0_0() { return cFieldsVarDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentML_COMMENT_DOCTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRetTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRetTypeTypeParserRuleCall_2_0_0 = (RuleCall)cRetTypeAssignment_2_0.eContents().get(0);
		private final Assignment cVoidAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cVoidVoidKeyword_2_1_0 = (Keyword)cVoidAssignment_2_1.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIdentifierParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsVarDeclarationParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsVarDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Procedure:
		//	comment=ML_COMMENT_DOC?
		//	//(visibility=AccessModifier)?
		//	static?='static'? (retType=Type | void?='void') id=Identifier '(' (params+=VarDeclaration (','
		//	params+=VarDeclaration)*)? ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//comment=ML_COMMENT_DOC? //(visibility=AccessModifier)?
		//static?='static'? (retType=Type | void?='void') id=Identifier '(' (params+=VarDeclaration (','
		//params+=VarDeclaration)*)? ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//comment=ML_COMMENT_DOC?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//ML_COMMENT_DOC
		public RuleCall getCommentML_COMMENT_DOCTerminalRuleCall_0_0() { return cCommentML_COMMENT_DOCTerminalRuleCall_0_0; }
		
		////(visibility=AccessModifier)?
		//static?='static'?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }
		
		//(retType=Type | void?='void')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//retType=Type
		public Assignment getRetTypeAssignment_2_0() { return cRetTypeAssignment_2_0; }
		
		//Type
		public RuleCall getRetTypeTypeParserRuleCall_2_0_0() { return cRetTypeTypeParserRuleCall_2_0_0; }
		
		//void?='void'
		public Assignment getVoidAssignment_2_1() { return cVoidAssignment_2_1; }
		
		//'void'
		public Keyword getVoidVoidKeyword_2_1_0() { return cVoidVoidKeyword_2_1_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_3_0() { return cIdIdentifierParserRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params+=VarDeclaration (',' params+=VarDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//params+=VarDeclaration
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }
		
		//VarDeclaration
		public RuleCall getParamsVarDeclarationParserRuleCall_5_0_0() { return cParamsVarDeclarationParserRuleCall_5_0_0; }
		
		//(',' params+=VarDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//params+=VarDeclaration
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }
		
		//VarDeclaration
		public RuleCall getParamsVarDeclarationParserRuleCall_5_1_1_0() { return cParamsVarDeclarationParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=Block
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_7_0() { return cBodyBlockParserRuleCall_7_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cReturnParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBreakParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cContinueParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cVarDeclarationAssignParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cVarAssignParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cIncrementParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cDecrementParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cProcCallParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cIfElseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWhileParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cForParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cDoWhileParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		
		//Statement:
		//	Return ';' | Break ';' | Continue ';' | VarDeclarationAssign ';' | VarAssign ';' | Increment ';' | Decrement ';' |
		//	ProcCall ';' | IfElse | While | For | DoWhile ';';
		@Override public ParserRule getRule() { return rule; }
		
		//Return ';' | Break ';' | Continue ';' | VarDeclarationAssign ';' | VarAssign ';' | Increment ';' | Decrement ';' |
		//ProcCall ';' | IfElse | While | For | DoWhile ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Return ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//Return
		public RuleCall getReturnParserRuleCall_0_0() { return cReturnParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//Break ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//Break
		public RuleCall getBreakParserRuleCall_1_0() { return cBreakParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//Continue ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//Continue
		public RuleCall getContinueParserRuleCall_2_0() { return cContinueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//VarDeclarationAssign ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//VarDeclarationAssign
		public RuleCall getVarDeclarationAssignParserRuleCall_3_0() { return cVarDeclarationAssignParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//VarAssign ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_4_0() { return cVarAssignParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//Increment ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//Increment
		public RuleCall getIncrementParserRuleCall_5_0() { return cIncrementParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//Decrement ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//Decrement
		public RuleCall getDecrementParserRuleCall_6_0() { return cDecrementParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//ProcCall ';'
		public Group getGroup_7() { return cGroup_7; }
		
		//ProcCall
		public RuleCall getProcCallParserRuleCall_7_0() { return cProcCallParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
		
		//IfElse
		public RuleCall getIfElseParserRuleCall_8() { return cIfElseParserRuleCall_8; }
		
		//While
		public RuleCall getWhileParserRuleCall_9() { return cWhileParserRuleCall_9; }
		
		//For
		public RuleCall getForParserRuleCall_10() { return cForParserRuleCall_10; }
		
		//DoWhile ';'
		public Group getGroup_11() { return cGroup_11; }
		
		//DoWhile
		public RuleCall getDoWhileParserRuleCall_11_0() { return cDoWhileParserRuleCall_11_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Return:
		//	{Return} 'return' exp=Expression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Return} 'return' exp=Expression?
		public Group getGroup() { return cGroup; }
		
		//{Return}
		public Action getReturnAction_0() { return cReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//exp=Expression?
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Break:
		//	{Break}
		//	'break';
		@Override public ParserRule getRule() { return rule; }
		
		//{Break} 'break'
		public Group getGroup() { return cGroup; }
		
		//{Break}
		public Action getBreakAction_0() { return cBreakAction_0; }
		
		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}
	public class ContinueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Continue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Continue:
		//	{Continue}
		//	'continue';
		@Override public ParserRule getRule() { return rule; }
		
		//{Continue} 'continue'
		public Group getGroup() { return cGroup; }
		
		//{Continue}
		public Action getContinueAction_0() { return cContinueAction_0; }
		
		//'continue'
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//VarDeclaration:
		//	type=Type id=Identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type id=Identifier
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }
	}
	public class VarDeclarationAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.VarDeclarationAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpressionParserRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		
		//VarDeclarationAssign VarDeclaration:
		//	type=Type id=Identifier ('=' init=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type id=Identifier ('=' init=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }
		
		//('=' init=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//init=Expression
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }
		
		//Expression
		public RuleCall getInitExpressionParserRuleCall_2_1_0() { return cInitExpressionParserRuleCall_2_1_0; }
	}
	public class VarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.VarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarExpressionParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//VarAssign:
		//	var=VarExpression '=' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VarExpression '=' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//var=VarExpression
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VarExpression
		public RuleCall getVarVarExpressionParserRuleCall_0_0() { return cVarVarExpressionParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class IfElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.IfElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSelectionBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionBlockBlockParserRuleCall_4_0 = (RuleCall)cSelectionBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlternativeBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlternativeBlockBlockParserRuleCall_5_1_0 = (RuleCall)cAlternativeBlockAssignment_5_1.eContents().get(0);
		
		//IfElse:
		//	'if' '(' guard=Expression ')' selectionBlock=Block ('else' alternativeBlock=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' guard=Expression ')' selectionBlock=Block ('else' alternativeBlock=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//selectionBlock=Block
		public Assignment getSelectionBlockAssignment_4() { return cSelectionBlockAssignment_4; }
		
		//Block
		public RuleCall getSelectionBlockBlockParserRuleCall_4_0() { return cSelectionBlockBlockParserRuleCall_4_0; }
		
		//('else' alternativeBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//alternativeBlock=Block
		public Assignment getAlternativeBlockAssignment_5_1() { return cAlternativeBlockAssignment_5_1; }
		
		//Block
		public RuleCall getAlternativeBlockBlockParserRuleCall_5_1_0() { return cAlternativeBlockBlockParserRuleCall_5_1_0; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//While:
		//	'while' '(' guard=Expression ')' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' guard=Expression ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitStatementsForStatementInitParserRuleCall_2_0_0 = (RuleCall)cInitStatementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitStatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitStatementsForStatementInitParserRuleCall_2_1_1_0 = (RuleCall)cInitStatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuardAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuardExpressionParserRuleCall_4_0 = (RuleCall)cGuardAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cProgressStatementsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cProgressStatementsForStatementParserRuleCall_6_0_0 = (RuleCall)cProgressStatementsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cProgressStatementsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cProgressStatementsForStatementParserRuleCall_6_1_1_0 = (RuleCall)cProgressStatementsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		
		//For:
		//	'for' '(' (initStatements+=ForStatementInit (',' initStatements+=ForStatementInit)*)? ';' guard=Expression ';'
		//	(progressStatements+=ForStatement (',' progressStatements+=ForStatement)*)? ')' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' (initStatements+=ForStatementInit (',' initStatements+=ForStatementInit)*)? ';' guard=Expression ';'
		//(progressStatements+=ForStatement (',' progressStatements+=ForStatement)*)? ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(initStatements+=ForStatementInit (',' initStatements+=ForStatementInit)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//initStatements+=ForStatementInit
		public Assignment getInitStatementsAssignment_2_0() { return cInitStatementsAssignment_2_0; }
		
		//ForStatementInit
		public RuleCall getInitStatementsForStatementInitParserRuleCall_2_0_0() { return cInitStatementsForStatementInitParserRuleCall_2_0_0; }
		
		//(',' initStatements+=ForStatementInit)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//initStatements+=ForStatementInit
		public Assignment getInitStatementsAssignment_2_1_1() { return cInitStatementsAssignment_2_1_1; }
		
		//ForStatementInit
		public RuleCall getInitStatementsForStatementInitParserRuleCall_2_1_1_0() { return cInitStatementsForStatementInitParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//guard=Expression
		public Assignment getGuardAssignment_4() { return cGuardAssignment_4; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_4_0() { return cGuardExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//(progressStatements+=ForStatement (',' progressStatements+=ForStatement)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//progressStatements+=ForStatement
		public Assignment getProgressStatementsAssignment_6_0() { return cProgressStatementsAssignment_6_0; }
		
		//ForStatement
		public RuleCall getProgressStatementsForStatementParserRuleCall_6_0_0() { return cProgressStatementsForStatementParserRuleCall_6_0_0; }
		
		//(',' progressStatements+=ForStatement)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//progressStatements+=ForStatement
		public Assignment getProgressStatementsAssignment_6_1_1() { return cProgressStatementsAssignment_6_1_1; }
		
		//ForStatement
		public RuleCall getProgressStatementsForStatementParserRuleCall_6_1_1_0() { return cProgressStatementsForStatementParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
	}
	public class DoWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.DoWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuardAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuardExpressionParserRuleCall_4_0 = (RuleCall)cGuardAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DoWhile:
		//	'do' block=Block 'while' '(' guard=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' block=Block 'while' '(' guard=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//guard=Expression
		public Assignment getGuardAssignment_4() { return cGuardAssignment_4; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_4_0() { return cGuardExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ForStatementInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ForStatementInit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclarationAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ForStatementInit Statement:
		//	VarDeclarationAssign | VarAssign;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDeclarationAssign | VarAssign
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarDeclarationAssign
		public RuleCall getVarDeclarationAssignParserRuleCall_0() { return cVarDeclarationAssignParserRuleCall_0; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_1() { return cVarAssignParserRuleCall_1; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ForStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIncrementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecrementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ForStatement Statement:
		//	VarAssign | Increment | Decrement;
		@Override public ParserRule getRule() { return rule; }
		
		//VarAssign | Increment | Decrement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_0() { return cVarAssignParserRuleCall_0; }
		
		//Increment
		public RuleCall getIncrementParserRuleCall_1() { return cIncrementParserRuleCall_1; }
		
		//Decrement
		public RuleCall getDecrementParserRuleCall_2() { return cDecrementParserRuleCall_2; }
	}
	public class IncrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Increment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Increment:
		//	id=Identifier '++';
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identifier '++'
		public Group getGroup() { return cGroup; }
		
		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
	}
	public class DecrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Decrement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Decrement:
		//	id=Identifier '--';
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identifier '--'
		public Group getGroup() { return cGroup; }
		
		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////BinaryExpression returns Expression:
		////	Or | Xor | And | Equality | Relation | Addition | Multiplication
		////;
		//Expression:
		//	Or //(conditional+='?' trueCase+=Expression ':' falseCase+=Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	Xor ({Or.left=current} '||' right=Xor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Xor ({Or.left=current} '||' right=Xor)*
		public Group getGroup() { return cGroup; }
		
		//Xor
		public RuleCall getXorParserRuleCall_0() { return cXorParserRuleCall_0; }
		
		//({Or.left=current} '||' right=Xor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=Xor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Xor
		public RuleCall getRightXorParserRuleCall_1_2_0() { return cRightXorParserRuleCall_1_2_0; }
	}
	public class XorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Xor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Xor Expression:
		//	And ({Xor.left=current} '^' right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Xor.left=current} '^' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Xor.left=current} '^' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Xor.left=current}
		public Action getXorLeftAction_1_0() { return cXorLeftAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} '&&' right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} '&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} '&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Relation ({Equality.left=current} operator=('==' | '!=') right=Relation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Relation ({Equality.left=current} operator=('==' | '!=') right=Relation)*
		public Group getGroup() { return cGroup; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }
		
		//({Equality.left=current} operator=('==' | '!=') right=Relation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//operator=('==' | '!=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Relation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Relation
		public RuleCall getRightRelationParserRuleCall_1_2_0() { return cRightRelationParserRuleCall_1_2_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Relation Expression:
		//	Addition ({Relation.left=current} operator=('<' | '<=' | '>' | '>=') right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition ({Relation.left=current} operator=('<' | '<=' | '>' | '>=') right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//({Relation.left=current} operator=('<' | '<=' | '>' | '>=') right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Relation.left=current}
		public Action getRelationLeftAction_1_0() { return cRelationLeftAction_1_0; }
		
		//operator=('<' | '<=' | '>' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<' | '<=' | '>' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication ({Addition.left=current} operator=('+' | '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} operator=('+' | '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} operator=('+' | '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication Expression:
		//	Primary ({Multiplication.left=current} operator=('*' | '/' | '%') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} operator=('*' | '/' | '%') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} operator=('*' | '/' | '%') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator=('*' | '/' | '%')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/' | '%')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_1_1_0_2() { return cOperatorPercentSignKeyword_1_1_0_2; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVarExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNewArrayParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNewObjectParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cPrimaryParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Primary Expression:
		//	Literal | Null | ProcCall | VarExpression | NewArray | NewObject | '!' Primary | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | Null | ProcCall | VarExpression | NewArray | NewObject | '!' Primary | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//Null
		public RuleCall getNullParserRuleCall_1() { return cNullParserRuleCall_1; }
		
		//ProcCall
		public RuleCall getProcCallParserRuleCall_2() { return cProcCallParserRuleCall_2; }
		
		//VarExpression
		public RuleCall getVarExpressionParserRuleCall_3() { return cVarExpressionParserRuleCall_3; }
		
		//NewArray
		public RuleCall getNewArrayParserRuleCall_4() { return cNewArrayParserRuleCall_4; }
		
		//NewObject
		public RuleCall getNewObjectParserRuleCall_5() { return cNewObjectParserRuleCall_5; }
		
		//'!' Primary
		public Group getGroup_6() { return cGroup_6; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_6_0() { return cExclamationMarkKeyword_6_0; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_6_1() { return cPrimaryParserRuleCall_6_1; }
		
		//'(' Expression ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_7_1() { return cExpressionParserRuleCall_7_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2() { return cRightParenthesisKeyword_7_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Literal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePRIMITIVE_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////UnaryExpression returns Expression:
		////	uoperator=('!') expression=Primary
		////;
		//Literal:
		//	value=PRIMITIVE_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PRIMITIVE_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PRIMITIVE_VALUE
		public RuleCall getValuePRIMITIVE_VALUETerminalRuleCall_0() { return cValuePRIMITIVE_VALUETerminalRuleCall_0; }
	}
	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Null");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Null:
		//	{Null} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{Null} 'null'
		public Group getGroup() { return cGroup; }
		
		//{Null}
		public Action getNullAction_0() { return cNullAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class VarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.VarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPartsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPartsIdentifierParserRuleCall_0_0_0 = (RuleCall)cPartsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cArrayIndexesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cArrayIndexesExpressionParserRuleCall_0_1_1_0 = (RuleCall)cArrayIndexesAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartsIdentifierParserRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArrayIndexesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArrayIndexesExpressionParserRuleCall_1_2_1_0 = (RuleCall)cArrayIndexesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//VarExpression:
		//	(parts+=Identifier ('[' arrayIndexes+=Expression ']')*) ('.' parts+=Identifier ('[' arrayIndexes+=Expression ']')*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(parts+=Identifier ('[' arrayIndexes+=Expression ']')*) ('.' parts+=Identifier ('[' arrayIndexes+=Expression ']')*)*
		public Group getGroup() { return cGroup; }
		
		//(parts+=Identifier ('[' arrayIndexes+=Expression ']')*)
		public Group getGroup_0() { return cGroup_0; }
		
		//parts+=Identifier
		public Assignment getPartsAssignment_0_0() { return cPartsAssignment_0_0; }
		
		//Identifier
		public RuleCall getPartsIdentifierParserRuleCall_0_0_0() { return cPartsIdentifierParserRuleCall_0_0_0; }
		
		//('[' arrayIndexes+=Expression ']')*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//arrayIndexes+=Expression
		public Assignment getArrayIndexesAssignment_0_1_1() { return cArrayIndexesAssignment_0_1_1; }
		
		//Expression
		public RuleCall getArrayIndexesExpressionParserRuleCall_0_1_1_0() { return cArrayIndexesExpressionParserRuleCall_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//('.' parts+=Identifier ('[' arrayIndexes+=Expression ']')*)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//parts+=Identifier
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }
		
		//Identifier
		public RuleCall getPartsIdentifierParserRuleCall_1_1_0() { return cPartsIdentifierParserRuleCall_1_1_0; }
		
		//('[' arrayIndexes+=Expression ']')*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//arrayIndexes+=Expression
		public Assignment getArrayIndexesAssignment_1_2_1() { return cArrayIndexesAssignment_1_2_1; }
		
		//Expression
		public RuleCall getArrayIndexesExpressionParserRuleCall_1_2_1_0() { return cArrayIndexesExpressionParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}
	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcCall:
		//	id=Identifier '(' (args+=Expression (',' args+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identifier '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayDimsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArrayDimsLeftSquareBracketKeyword_1_0_0 = (Keyword)cArrayDimsAssignment_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Type:
		//	id=Identifier (arrayDims+='[' ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Identifier (arrayDims+='[' ']')*
		public Group getGroup() { return cGroup; }
		
		//id=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }
		
		//(arrayDims+='[' ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//arrayDims+='['
		public Assignment getArrayDimsAssignment_1_0() { return cArrayDimsAssignment_1_0; }
		
		//'['
		public Keyword getArrayDimsLeftSquareBracketKeyword_1_0_0() { return cArrayDimsLeftSquareBracketKeyword_1_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}
	public class NewArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.NewArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArrayDimsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArrayDimsExpressionParserRuleCall_2_1_0 = (RuleCall)cArrayDimsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//NewArray:
		//	'new' type=Identifier ('[' arrayDims+=Expression ']')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' type=Identifier ('[' arrayDims+=Expression ']')+
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//type=Identifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Identifier
		public RuleCall getTypeIdentifierParserRuleCall_1_0() { return cTypeIdentifierParserRuleCall_1_0; }
		
		//('[' arrayDims+=Expression ']')+
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//arrayDims+=Expression
		public Assignment getArrayDimsAssignment_2_1() { return cArrayDimsAssignment_2_1; }
		
		//Expression
		public RuleCall getArrayDimsExpressionParserRuleCall_2_1_0() { return cArrayDimsExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class NewObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.NewObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NewObject:
		//	'new' type=Identifier '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' type=Identifier '(' ')'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//type=Identifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Identifier
		public RuleCall getTypeIdentifierParserRuleCall_1_0() { return cTypeIdentifierParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.Identifier");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Identifier:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	
	
	private final ModuleElements pModule;
	private final ConstantElements pConstant;
	private final RecordElements pRecord;
	private final ProcedureElements pProcedure;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final ReturnElements pReturn;
	private final BreakElements pBreak;
	private final ContinueElements pContinue;
	private final VarDeclarationElements pVarDeclaration;
	private final VarDeclarationAssignElements pVarDeclarationAssign;
	private final VarAssignElements pVarAssign;
	private final IfElseElements pIfElse;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final DoWhileElements pDoWhile;
	private final ForStatementInitElements pForStatementInit;
	private final ForStatementElements pForStatement;
	private final IncrementElements pIncrement;
	private final DecrementElements pDecrement;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final XorElements pXor;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final RelationElements pRelation;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final LiteralElements pLiteral;
	private final NullElements pNull;
	private final VarExpressionElements pVarExpression;
	private final ProcCallElements pProcCall;
	private final TypeElements pType;
	private final NewArrayElements pNewArray;
	private final NewObjectElements pNewObject;
	private final IdentifierElements pIdentifier;
	private final TerminalRule tINTEGER;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tPRIMITIVE_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT_DOC;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public JavaliGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModule = new ModuleElements();
		this.pConstant = new ConstantElements();
		this.pRecord = new RecordElements();
		this.pProcedure = new ProcedureElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pReturn = new ReturnElements();
		this.pBreak = new BreakElements();
		this.pContinue = new ContinueElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVarDeclarationAssign = new VarDeclarationAssignElements();
		this.pVarAssign = new VarAssignElements();
		this.pIfElse = new IfElseElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pDoWhile = new DoWhileElements();
		this.pForStatementInit = new ForStatementInitElements();
		this.pForStatement = new ForStatementElements();
		this.pIncrement = new IncrementElements();
		this.pDecrement = new DecrementElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pXor = new XorElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pRelation = new RelationElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pLiteral = new LiteralElements();
		this.pNull = new NullElements();
		this.pVarExpression = new VarExpressionElements();
		this.pProcCall = new ProcCallElements();
		this.pType = new TypeElements();
		this.pNewArray = new NewArrayElements();
		this.pNewObject = new NewObjectElements();
		this.pIdentifier = new IdentifierElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.INTEGER");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.BOOLEAN");
		this.tPRIMITIVE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.PRIMITIVE_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ID");
		this.tML_COMMENT_DOC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ML_COMMENT_DOC");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "pt.iscte.paddle.Javali.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pt.iscte.paddle.Javali".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Module:
	//	(constants+=Constant | records+=Record | procedures+=Procedure)*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	////TypeDef returns Module:
	////	{TypeDef} (
	////	//(visibility=AccessModifier)?
	////	'class' id=Identifier '{' 
	////	(
	////		constants+=Constant |
	////		procedures+=Procedure |
	////		(fields+=VarDeclaration ';')
	////	)*
	////	'}'
	////	)?
	////;
	////
	////StaticClass:
	////	{StaticClass} 
	////	(constants+=Constant |
	////	records+=Record |
	////	procedures+=Procedure)+
	////;
	//Constant:
	//	static?='static'? 'final' type=Type id=Identifier '=' value=Literal ';';
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Record:
	//	'class' id=Identifier '{' (fields+=VarDeclaration ';')*
	//	'}';
	public RecordElements getRecordAccess() {
		return pRecord;
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}
	
	//Procedure:
	//	comment=ML_COMMENT_DOC?
	//	//(visibility=AccessModifier)?
	//	static?='static'? (retType=Type | void?='void') id=Identifier '(' (params+=VarDeclaration (','
	//	params+=VarDeclaration)*)? ')' body=Block;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}
	
	//Block:
	//	{Block} '{' statements+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	Return ';' | Break ';' | Continue ';' | VarDeclarationAssign ';' | VarAssign ';' | Increment ';' | Decrement ';' |
	//	ProcCall ';' | IfElse | While | For | DoWhile ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Return:
	//	{Return} 'return' exp=Expression?;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Break:
	//	{Break}
	//	'break';
	public BreakElements getBreakAccess() {
		return pBreak;
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}
	
	//Continue:
	//	{Continue}
	//	'continue';
	public ContinueElements getContinueAccess() {
		return pContinue;
	}
	
	public ParserRule getContinueRule() {
		return getContinueAccess().getRule();
	}
	
	//VarDeclaration:
	//	type=Type id=Identifier;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//VarDeclarationAssign VarDeclaration:
	//	type=Type id=Identifier ('=' init=Expression)?;
	public VarDeclarationAssignElements getVarDeclarationAssignAccess() {
		return pVarDeclarationAssign;
	}
	
	public ParserRule getVarDeclarationAssignRule() {
		return getVarDeclarationAssignAccess().getRule();
	}
	
	//VarAssign:
	//	var=VarExpression '=' exp=Expression;
	public VarAssignElements getVarAssignAccess() {
		return pVarAssign;
	}
	
	public ParserRule getVarAssignRule() {
		return getVarAssignAccess().getRule();
	}
	
	//IfElse:
	//	'if' '(' guard=Expression ')' selectionBlock=Block ('else' alternativeBlock=Block)?;
	public IfElseElements getIfElseAccess() {
		return pIfElse;
	}
	
	public ParserRule getIfElseRule() {
		return getIfElseAccess().getRule();
	}
	
	//While:
	//	'while' '(' guard=Expression ')' block=Block;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//	'for' '(' (initStatements+=ForStatementInit (',' initStatements+=ForStatementInit)*)? ';' guard=Expression ';'
	//	(progressStatements+=ForStatement (',' progressStatements+=ForStatement)*)? ')' block=Block;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//DoWhile:
	//	'do' block=Block 'while' '(' guard=Expression ')';
	public DoWhileElements getDoWhileAccess() {
		return pDoWhile;
	}
	
	public ParserRule getDoWhileRule() {
		return getDoWhileAccess().getRule();
	}
	
	//ForStatementInit Statement:
	//	VarDeclarationAssign | VarAssign;
	public ForStatementInitElements getForStatementInitAccess() {
		return pForStatementInit;
	}
	
	public ParserRule getForStatementInitRule() {
		return getForStatementInitAccess().getRule();
	}
	
	//ForStatement Statement:
	//	VarAssign | Increment | Decrement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//Increment:
	//	id=Identifier '++';
	public IncrementElements getIncrementAccess() {
		return pIncrement;
	}
	
	public ParserRule getIncrementRule() {
		return getIncrementAccess().getRule();
	}
	
	//Decrement:
	//	id=Identifier '--';
	public DecrementElements getDecrementAccess() {
		return pDecrement;
	}
	
	public ParserRule getDecrementRule() {
		return getDecrementAccess().getRule();
	}
	
	////BinaryExpression returns Expression:
	////	Or | Xor | And | Equality | Relation | Addition | Multiplication
	////;
	//Expression:
	//	Or //(conditional+='?' trueCase+=Expression ':' falseCase+=Expression)?
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	Xor ({Or.left=current} '||' right=Xor)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Xor Expression:
	//	And ({Xor.left=current} '^' right=And)*;
	public XorElements getXorAccess() {
		return pXor;
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} '&&' right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Relation ({Equality.left=current} operator=('==' | '!=') right=Relation)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Relation Expression:
	//	Addition ({Relation.left=current} operator=('<' | '<=' | '>' | '>=') right=Addition)*;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication ({Addition.left=current} operator=('+' | '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Primary ({Multiplication.left=current} operator=('*' | '/' | '%') right=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary Expression:
	//	Literal | Null | ProcCall | VarExpression | NewArray | NewObject | '!' Primary | '(' Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	////UnaryExpression returns Expression:
	////	uoperator=('!') expression=Primary
	////;
	//Literal:
	//	value=PRIMITIVE_VALUE;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Null:
	//	{Null} 'null';
	public NullElements getNullAccess() {
		return pNull;
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}
	
	//VarExpression:
	//	(parts+=Identifier ('[' arrayIndexes+=Expression ']')*) ('.' parts+=Identifier ('[' arrayIndexes+=Expression ']')*)*;
	public VarExpressionElements getVarExpressionAccess() {
		return pVarExpression;
	}
	
	public ParserRule getVarExpressionRule() {
		return getVarExpressionAccess().getRule();
	}
	
	//ProcCall:
	//	id=Identifier '(' (args+=Expression (',' args+=Expression)*)? ')';
	public ProcCallElements getProcCallAccess() {
		return pProcCall;
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}
	
	//Type:
	//	id=Identifier (arrayDims+='[' ']')*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//NewArray:
	//	'new' type=Identifier ('[' arrayDims+=Expression ']')+;
	public NewArrayElements getNewArrayAccess() {
		return pNewArray;
	}
	
	public ParserRule getNewArrayRule() {
		return getNewArrayAccess().getRule();
	}
	
	//NewObject:
	//	'new' type=Identifier '(' ')';
	public NewObjectElements getNewObjectAccess() {
		return pNewObject;
	}
	
	public ParserRule getNewObjectRule() {
		return getNewObjectAccess().getRule();
	}
	
	//Identifier:
	//	id=ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//terminal INTEGER:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal DOUBLE:
	//	INTEGER '.' '0'..'9'+;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal PRIMITIVE_VALUE:
	//	INTEGER | DOUBLE | BOOLEAN;
	public TerminalRule getPRIMITIVE_VALUERule() {
		return tPRIMITIVE_VALUE;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT_DOC:
	//	'/**'->'*/';
	public TerminalRule getML_COMMENT_DOCRule() {
		return tML_COMMENT_DOC;
	}
	
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
