/**
 * generated by Xtext 2.19.0
 */
package pt.iscte.paddle.javali.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import pt.iscte.paddle.javali.Block;
import pt.iscte.paddle.javali.Expression;
import pt.iscte.paddle.javali.For;
import pt.iscte.paddle.javali.JavaliPackage;
import pt.iscte.paddle.javali.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pt.iscte.paddle.javali.impl.ForImpl#getInitStatements <em>Init Statements</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ForImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ForImpl#getProgressStatements <em>Progress Statements</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ForImpl#getBlock <em>Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForImpl extends StatementImpl implements For
{
  /**
   * The cached value of the '{@link #getInitStatements() <em>Init Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> initStatements;

  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Expression guard;

  /**
   * The cached value of the '{@link #getProgressStatements() <em>Progress Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgressStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> progressStatements;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected Block block;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaliPackage.Literals.FOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getInitStatements()
  {
    if (initStatements == null)
    {
      initStatements = new EObjectContainmentEList<Statement>(Statement.class, this, JavaliPackage.FOR__INIT_STATEMENTS);
    }
    return initStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Expression newGuard, NotificationChain msgs)
  {
    Expression oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.FOR__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(Expression newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.FOR__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.FOR__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.FOR__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getProgressStatements()
  {
    if (progressStatements == null)
    {
      progressStatements = new EObjectContainmentEList<Statement>(Statement.class, this, JavaliPackage.FOR__PROGRESS_STATEMENTS);
    }
    return progressStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(Block newBlock, NotificationChain msgs)
  {
    Block oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.FOR__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlock(Block newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.FOR__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.FOR__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.FOR__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaliPackage.FOR__INIT_STATEMENTS:
        return ((InternalEList<?>)getInitStatements()).basicRemove(otherEnd, msgs);
      case JavaliPackage.FOR__GUARD:
        return basicSetGuard(null, msgs);
      case JavaliPackage.FOR__PROGRESS_STATEMENTS:
        return ((InternalEList<?>)getProgressStatements()).basicRemove(otherEnd, msgs);
      case JavaliPackage.FOR__BLOCK:
        return basicSetBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaliPackage.FOR__INIT_STATEMENTS:
        return getInitStatements();
      case JavaliPackage.FOR__GUARD:
        return getGuard();
      case JavaliPackage.FOR__PROGRESS_STATEMENTS:
        return getProgressStatements();
      case JavaliPackage.FOR__BLOCK:
        return getBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaliPackage.FOR__INIT_STATEMENTS:
        getInitStatements().clear();
        getInitStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case JavaliPackage.FOR__GUARD:
        setGuard((Expression)newValue);
        return;
      case JavaliPackage.FOR__PROGRESS_STATEMENTS:
        getProgressStatements().clear();
        getProgressStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case JavaliPackage.FOR__BLOCK:
        setBlock((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.FOR__INIT_STATEMENTS:
        getInitStatements().clear();
        return;
      case JavaliPackage.FOR__GUARD:
        setGuard((Expression)null);
        return;
      case JavaliPackage.FOR__PROGRESS_STATEMENTS:
        getProgressStatements().clear();
        return;
      case JavaliPackage.FOR__BLOCK:
        setBlock((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.FOR__INIT_STATEMENTS:
        return initStatements != null && !initStatements.isEmpty();
      case JavaliPackage.FOR__GUARD:
        return guard != null;
      case JavaliPackage.FOR__PROGRESS_STATEMENTS:
        return progressStatements != null && !progressStatements.isEmpty();
      case JavaliPackage.FOR__BLOCK:
        return block != null;
    }
    return super.eIsSet(featureID);
  }

} //ForImpl
