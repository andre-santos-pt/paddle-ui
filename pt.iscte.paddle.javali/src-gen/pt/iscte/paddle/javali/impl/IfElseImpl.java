/**
 * generated by Xtext 2.19.0
 */
package pt.iscte.paddle.javali.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import pt.iscte.paddle.javali.Block;
import pt.iscte.paddle.javali.Expression;
import pt.iscte.paddle.javali.IfElse;
import pt.iscte.paddle.javali.JavaliPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Else</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pt.iscte.paddle.javali.impl.IfElseImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.IfElseImpl#getSelectionBlock <em>Selection Block</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.IfElseImpl#getAlternativeBlock <em>Alternative Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfElseImpl extends StatementImpl implements IfElse
{
  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Expression guard;

  /**
   * The cached value of the '{@link #getSelectionBlock() <em>Selection Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectionBlock()
   * @generated
   * @ordered
   */
  protected Block selectionBlock;

  /**
   * The cached value of the '{@link #getAlternativeBlock() <em>Alternative Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlternativeBlock()
   * @generated
   * @ordered
   */
  protected Block alternativeBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfElseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaliPackage.Literals.IF_ELSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Expression newGuard, NotificationChain msgs)
  {
    Expression oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(Expression newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block getSelectionBlock()
  {
    return selectionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectionBlock(Block newSelectionBlock, NotificationChain msgs)
  {
    Block oldSelectionBlock = selectionBlock;
    selectionBlock = newSelectionBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__SELECTION_BLOCK, oldSelectionBlock, newSelectionBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectionBlock(Block newSelectionBlock)
  {
    if (newSelectionBlock != selectionBlock)
    {
      NotificationChain msgs = null;
      if (selectionBlock != null)
        msgs = ((InternalEObject)selectionBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__SELECTION_BLOCK, null, msgs);
      if (newSelectionBlock != null)
        msgs = ((InternalEObject)newSelectionBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__SELECTION_BLOCK, null, msgs);
      msgs = basicSetSelectionBlock(newSelectionBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__SELECTION_BLOCK, newSelectionBlock, newSelectionBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block getAlternativeBlock()
  {
    return alternativeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlternativeBlock(Block newAlternativeBlock, NotificationChain msgs)
  {
    Block oldAlternativeBlock = alternativeBlock;
    alternativeBlock = newAlternativeBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK, oldAlternativeBlock, newAlternativeBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlternativeBlock(Block newAlternativeBlock)
  {
    if (newAlternativeBlock != alternativeBlock)
    {
      NotificationChain msgs = null;
      if (alternativeBlock != null)
        msgs = ((InternalEObject)alternativeBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK, null, msgs);
      if (newAlternativeBlock != null)
        msgs = ((InternalEObject)newAlternativeBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK, null, msgs);
      msgs = basicSetAlternativeBlock(newAlternativeBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK, newAlternativeBlock, newAlternativeBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaliPackage.IF_ELSE__GUARD:
        return basicSetGuard(null, msgs);
      case JavaliPackage.IF_ELSE__SELECTION_BLOCK:
        return basicSetSelectionBlock(null, msgs);
      case JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK:
        return basicSetAlternativeBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaliPackage.IF_ELSE__GUARD:
        return getGuard();
      case JavaliPackage.IF_ELSE__SELECTION_BLOCK:
        return getSelectionBlock();
      case JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK:
        return getAlternativeBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaliPackage.IF_ELSE__GUARD:
        setGuard((Expression)newValue);
        return;
      case JavaliPackage.IF_ELSE__SELECTION_BLOCK:
        setSelectionBlock((Block)newValue);
        return;
      case JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK:
        setAlternativeBlock((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.IF_ELSE__GUARD:
        setGuard((Expression)null);
        return;
      case JavaliPackage.IF_ELSE__SELECTION_BLOCK:
        setSelectionBlock((Block)null);
        return;
      case JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK:
        setAlternativeBlock((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.IF_ELSE__GUARD:
        return guard != null;
      case JavaliPackage.IF_ELSE__SELECTION_BLOCK:
        return selectionBlock != null;
      case JavaliPackage.IF_ELSE__ALTERNATIVE_BLOCK:
        return alternativeBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //IfElseImpl
