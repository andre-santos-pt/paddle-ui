/**
 * generated by Xtext 2.19.0
 */
package pt.iscte.paddle.javali.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import pt.iscte.paddle.javali.Block;
import pt.iscte.paddle.javali.Identifier;
import pt.iscte.paddle.javali.JavaliPackage;
import pt.iscte.paddle.javali.Procedure;
import pt.iscte.paddle.javali.Type;
import pt.iscte.paddle.javali.VarDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Procedure</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#isStatic <em>Static</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#getRetType <em>Ret Type</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#isVoid <em>Void</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#getId <em>Id</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#getParams <em>Params</em>}</li>
 *   <li>{@link pt.iscte.paddle.javali.impl.ProcedureImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcedureImpl extends MinimalEObjectImpl.Container implements Procedure
{
  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * The default value of the '{@link #isStatic() <em>Static</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStatic()
   * @generated
   * @ordered
   */
  protected static final boolean STATIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStatic() <em>Static</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStatic()
   * @generated
   * @ordered
   */
  protected boolean static_ = STATIC_EDEFAULT;

  /**
   * The cached value of the '{@link #getRetType() <em>Ret Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRetType()
   * @generated
   * @ordered
   */
  protected Type retType;

  /**
   * The default value of the '{@link #isVoid() <em>Void</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVoid()
   * @generated
   * @ordered
   */
  protected static final boolean VOID_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVoid() <em>Void</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVoid()
   * @generated
   * @ordered
   */
  protected boolean void_ = VOID_EDEFAULT;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected Identifier id;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<VarDeclaration> params;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected Block body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcedureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaliPackage.Literals.PROCEDURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStatic()
  {
    return static_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatic(boolean newStatic)
  {
    boolean oldStatic = static_;
    static_ = newStatic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__STATIC, oldStatic, static_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getRetType()
  {
    return retType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRetType(Type newRetType, NotificationChain msgs)
  {
    Type oldRetType = retType;
    retType = newRetType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__RET_TYPE, oldRetType, newRetType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRetType(Type newRetType)
  {
    if (newRetType != retType)
    {
      NotificationChain msgs = null;
      if (retType != null)
        msgs = ((InternalEObject)retType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__RET_TYPE, null, msgs);
      if (newRetType != null)
        msgs = ((InternalEObject)newRetType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__RET_TYPE, null, msgs);
      msgs = basicSetRetType(newRetType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__RET_TYPE, newRetType, newRetType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isVoid()
  {
    return void_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVoid(boolean newVoid)
  {
    boolean oldVoid = void_;
    void_ = newVoid;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__VOID, oldVoid, void_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetId(Identifier newId, NotificationChain msgs)
  {
    Identifier oldId = id;
    id = newId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__ID, oldId, newId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(Identifier newId)
  {
    if (newId != id)
    {
      NotificationChain msgs = null;
      if (id != null)
        msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__ID, null, msgs);
      if (newId != null)
        msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__ID, null, msgs);
      msgs = basicSetId(newId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__ID, newId, newId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarDeclaration> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<VarDeclaration>(VarDeclaration.class, this, JavaliPackage.PROCEDURE__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(Block newBody, NotificationChain msgs)
  {
    Block oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(Block newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaliPackage.PROCEDURE__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaliPackage.PROCEDURE__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaliPackage.PROCEDURE__RET_TYPE:
        return basicSetRetType(null, msgs);
      case JavaliPackage.PROCEDURE__ID:
        return basicSetId(null, msgs);
      case JavaliPackage.PROCEDURE__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case JavaliPackage.PROCEDURE__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaliPackage.PROCEDURE__COMMENT:
        return getComment();
      case JavaliPackage.PROCEDURE__STATIC:
        return isStatic();
      case JavaliPackage.PROCEDURE__RET_TYPE:
        return getRetType();
      case JavaliPackage.PROCEDURE__VOID:
        return isVoid();
      case JavaliPackage.PROCEDURE__ID:
        return getId();
      case JavaliPackage.PROCEDURE__PARAMS:
        return getParams();
      case JavaliPackage.PROCEDURE__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaliPackage.PROCEDURE__COMMENT:
        setComment((String)newValue);
        return;
      case JavaliPackage.PROCEDURE__STATIC:
        setStatic((Boolean)newValue);
        return;
      case JavaliPackage.PROCEDURE__RET_TYPE:
        setRetType((Type)newValue);
        return;
      case JavaliPackage.PROCEDURE__VOID:
        setVoid((Boolean)newValue);
        return;
      case JavaliPackage.PROCEDURE__ID:
        setId((Identifier)newValue);
        return;
      case JavaliPackage.PROCEDURE__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends VarDeclaration>)newValue);
        return;
      case JavaliPackage.PROCEDURE__BODY:
        setBody((Block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.PROCEDURE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
      case JavaliPackage.PROCEDURE__STATIC:
        setStatic(STATIC_EDEFAULT);
        return;
      case JavaliPackage.PROCEDURE__RET_TYPE:
        setRetType((Type)null);
        return;
      case JavaliPackage.PROCEDURE__VOID:
        setVoid(VOID_EDEFAULT);
        return;
      case JavaliPackage.PROCEDURE__ID:
        setId((Identifier)null);
        return;
      case JavaliPackage.PROCEDURE__PARAMS:
        getParams().clear();
        return;
      case JavaliPackage.PROCEDURE__BODY:
        setBody((Block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaliPackage.PROCEDURE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
      case JavaliPackage.PROCEDURE__STATIC:
        return static_ != STATIC_EDEFAULT;
      case JavaliPackage.PROCEDURE__RET_TYPE:
        return retType != null;
      case JavaliPackage.PROCEDURE__VOID:
        return void_ != VOID_EDEFAULT;
      case JavaliPackage.PROCEDURE__ID:
        return id != null;
      case JavaliPackage.PROCEDURE__PARAMS:
        return params != null && !params.isEmpty();
      case JavaliPackage.PROCEDURE__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comment: ");
    result.append(comment);
    result.append(", static: ");
    result.append(static_);
    result.append(", void: ");
    result.append(void_);
    result.append(')');
    return result.toString();
  }

} //ProcedureImpl
